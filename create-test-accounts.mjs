import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcryptjs';

const prisma = new PrismaClient({
  datasources: {
    db: {
      url: process.env.DATABASE_URL || "file:./prisma/dev.db"
    }
  }
});

async function createTestAccounts() {
  try {
    console.log('–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã...');

    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
    const customer = await prisma.user.upsert({
      where: { phone: '+7-999-000-0001' },
      update: {},
      create: {
        id: 'test-customer-1',
        name: '–¢–µ—Å—Ç–æ–≤—ã–π –ó–∞–∫–∞–∑—á–∏–∫',
        email: 'customer-test@mb-trust.com',
        phone: '+7-999-000-0001',
        passwordHash: await bcrypt.hash('password123', 10),
        country: '–†–æ—Å—Å–∏—è',
        region: '–ú–æ—Å–∫–≤–∞',
        role: 'CUSTOMER',
        level: 'VERIFIED',
        balance: 10000,
        isVerified: true,
        isBlocked: false
      }
    });

    // –°–æ–∑–¥–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    const executor = await prisma.user.upsert({
      where: { phone: '+7-999-000-0002' },
      update: {},
      create: {
        id: 'test-executor-1',
        name: '–¢–µ—Å—Ç–æ–≤—ã–π –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å',
        email: 'executor-test@mb-trust.com',
        phone: '+7-999-000-0002',
        passwordHash: await bcrypt.hash('password123', 10),
        country: '–†–æ—Å—Å–∏—è',
        region: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
        role: 'EXECUTOR',
        level: 'VERIFIED',
        balance: 0,
        isVerified: true,
        isBlocked: false
      }
    });

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã:');
    console.log('üë§ –ó–∞–∫–∞–∑—á–∏–∫:', customer.name, customer.phone);
    console.log('üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:', executor.name, executor.phone);
    console.log('üîë –ü–∞—Ä–æ–ª—å –¥–ª—è –æ–±–æ–∏—Ö: password123');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createTestAccounts();