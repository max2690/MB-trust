// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Пользователи системы
model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  phone         String    @unique
  name          String
  passwordHash  String
  country       String
  region        String
  role          UserRole  @default(EXECUTOR)
  level         UserLevel @default(NOVICE)
  balance       Float     @default(0)
  isVerified    Boolean   @default(false)
  isBlocked     Boolean   @default(false)
  telegramId    String?   @unique  // Telegram ID для верификации
  rating        Float?    @default(0)  // Рейтинг пользователя
  
  // Активация аккаунта
  isActivated          Boolean  @default(false)
  activationStoryId    String?
  activationCompletedAt DateTime?
  
  // Уровень доверия
  trustLevelId         String?
  trustLevel           TrustLevel? @relation(fields: [trustLevelId], references: [id])
  totalExecutions      Int      @default(0)
  averageRating        Decimal  @default(0)
  daysActive           Int      @default(0)
  lastLevelCheck       DateTime @default(now())
  levelUpEligible      Boolean  @default(false)
  
  // Налоговая верификация
  isSelfEmployed       Boolean  @default(false)
  innNumber           String?
  nalogVerificationStatus String @default("PENDING")
  nalogVerifiedAt     DateTime?
  
  // Telegram Wallet
  telegramWalletId     String?
  telegramWalletVerified Boolean @default(false)
  telegramWalletVerifiedAt DateTime?
  
  // Настройки выплат
  preferredPayoutMethod PayoutMethod @default(TELEGRAM_WALLET)
  maxPayoutAmount      Decimal?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Связи
  orders        Order[]
  executions    Execution[]
  payments      Payment[]
  referrals     Referral[] @relation("Referrer")
  referredBy    Referral? @relation("Referred")
  dailyLimits   ExecutorDailyLimit[]
  refunds       Refund[]
  activationStories    ActivationStory[]
  payouts             Payout[]
  telegramVerifications TelegramVerification[]
  
  @@map("users")
}

// Администраторы системы
model Admin {
  id            String    @id @default(cuid())
  login         String    @unique
  passwordHash  String
  name          String
  role          AdminRole
  phone         String?   // Для SMS верификации
  email         String?   // Для email верификации
  telegramId    String?   @unique  // Telegram ID
  isActive      Boolean   @default(true)
  permissions   String?   // JSON строка с правами доступа
  createdBy     String?   // Кто создал (только для модераторов)
  createdAt     DateTime  @default(now())
  lastLogin     DateTime?
  
  // Связи
  creator       Admin?    @relation("AdminCreator", fields: [createdBy], references: [id])
  createdAdmins Admin[]   @relation("AdminCreator")
  sessions      AdminSession[]
  verificationCodes AdminVerificationCode[]
  
  @@map("admins")
}

// Сессии администраторов
model AdminSession {
  id            String    @id @default(cuid())
  adminId       String
  token         String    @unique
  smsVerified   Boolean   @default(false)
  emailVerified Boolean   @default(false)
  expiresAt     DateTime
  createdAt     DateTime  @default(now())
  
  // Связи
  admin         Admin     @relation(fields: [adminId], references: [id])
  
  @@map("admin_sessions")
}

// Коды верификации
model AdminVerificationCode {
  id            String    @id @default(cuid())
  adminId       String
  type          VerificationType
  code          String
  expiresAt     DateTime
  isUsed        Boolean   @default(false)
  createdAt     DateTime  @default(now())
  
  // Связи
  admin         Admin     @relation(fields: [adminId], references: [id])
  
  @@map("admin_verification_codes")
}

// Заказы от заказчиков
model Order {
  id            String      @id @default(cuid())
  title         String
  description   String
  targetAudience String?
  budget        Float
  reward        Float       // Сумма для исполнителя
  totalReward   Float?      // Общая сумма кампании
  region        String
  socialNetwork SocialNetwork
  qrCode        String      @unique
  qrCodeExpiry  DateTime
  processedImageUrl String? // URL обработанного изображения с QR кодом
  qrCodeUrl     String?     // URL отдельного QR кода
  quantity      Int         @default(1)  // Количество публикаций
  maxExecutions Int         @default(1)  // Максимум исполнителей
  completedCount Int        @default(0)  // Выполнено публикаций
  completedExecutions Int   @default(0)  // Количество завершенных выполнений
  deadline      DateTime    // Срок выполнения
  campaignType  CampaignType @default(SINGLE)  // SINGLE, WEEKLY, BIWEEKLY
  totalQuantity Int         @default(1)  // Общее количество публикаций для кампании
  dailySchedule Json?       // {"day1": 50, "day2": 200, "day3": 50}
  autoDistribution Boolean  @default(true)    // Автоматическое распределение
  refundOnFailure Boolean   @default(true)    // Возврат при невыполнении
  refundDeadline DateTime?  // Дедлайн для возврата (72 часа после deadline)
  status        OrderStatus @default(PENDING)
  
  // Ценообразование
  pricePerStory       Decimal  // Цена за одну сторис
  platformCommission  Decimal  // Комиссия платформы
  executorEarnings     Decimal  // Сколько получит исполнитель
  platformEarnings    Decimal  // Сколько получит платформа
  
  // Уровень исполнителя
  requiredTrustLevelId String?
  requiredTrustLevel   TrustLevel? @relation(fields: [requiredTrustLevelId], references: [id])
  
  // Тестовый режим
  isTestOrder Boolean  @default(false)
  testMode    Boolean  @default(false)
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Связи
  customerId    String
  customer      User        @relation(fields: [customerId], references: [id])
  executions    Execution[]
  refunds       Refund[]
  payments      Payment[]
  
  @@map("orders")
}

// Выполнения заказов исполнителями
model Execution {
  id                String           @id @default(cuid())
  screenshotUrl     String?          // URL скриншота
  notes             String?          // Заметки исполнителя
  clicks            Int              @default(0)
  reward            Float            // Сумма вознаграждения
  status            ExecutionStatus  @default(PENDING)
  reviewedAt        DateTime?        // Время проверки
  moderatorId       String?          // ID модератора, который проверил
  moderatorComment  String?          // Комментарий модератора
  
  // Тестовый режим
  isTestExecution Boolean @default(false)
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  // Связи
  orderId           String
  order             Order            @relation(fields: [orderId], references: [id])
  executorId        String
  executor          User             @relation(fields: [executorId], references: [id])
  
  @@unique([orderId, executorId]) // Защита от дублирования
  @@map("executions")
}

// Платежи и транзакции
model Payment {
  id            String        @id @default(cuid())
  amount        Float
  type          PaymentType
  status        PaymentStatus @default(PENDING)
  description   String?       // Описание платежа
  transactionId String?       // ID транзакции от платежной системы
  stripeId      String?
  executorId    String?       // ID исполнителя (для выплат)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Связи
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  orderId       String?       // Связь с заказом
  order         Order?        @relation(fields: [orderId], references: [id])
  
  @@map("payments")
}

// Реферальная система
model Referral {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  
  // Связи
  referrerId    String
  referrer      User     @relation("Referrer", fields: [referrerId], references: [id])
  referredId    String   @unique
  referred      User     @relation("Referred", fields: [referredId], references: [id])
  
  @@map("referrals")
}

// Дневные лимиты исполнителей
model ExecutorDailyLimit {
  id            String   @id @default(cuid())
  date          DateTime // Дата (без времени)
  executionsCount Int    @default(0) // Количество выполнений за день
  platformLimits Json?   // Лимиты по площадкам {"INSTAGRAM": 3, "TELEGRAM": 2}
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Связи
  executorId    String
  executor      User     @relation(fields: [executorId], references: [id])
  
  @@unique([executorId, date]) // Один лимит на исполнителя в день
  @@map("executor_daily_limits")
}

// Настройки платформ
model PlatformSettings {
  id            String   @id @default(cuid())
  platform      SocialNetwork
  basePrice     Float    // Базовая цена за сторис
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([platform])
  @@map("platform_settings")
}

// Настройки комиссий по уровням
model CommissionSettings {
  id            String   @id @default(cuid())
  level         UserLevel
  executorRate  Float    // Процент исполнителю (0.4 = 40%)
  platformRate  Float    // Процент платформе (0.6 = 60%)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([level])
  @@map("commission_settings")
}

// База городов России
model City {
  id            String   @id @default(cuid())
  name          String
  region        String
  country       String   @default("Россия")
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([name, region])
  @@map("cities")
}

// Возвраты денег
model Refund {
  id            String   @id @default(cuid())
  orderId       String
  customerId    String
  amount        Float
  reason        String   // Причина возврата
  status        RefundStatus @default(PENDING)
  processedAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Связи
  order         Order    @relation(fields: [orderId], references: [id])
  customer      User     @relation(fields: [customerId], references: [id])
  
  @@map("refunds")
}

// Система уровней доверия
model TrustLevel {
  id          String   @id @default(cuid())
  name        String   // "NOVICE", "VERIFIED", "REFERRAL", "TOP"
  displayName String   // "Новичок", "Проверенный", "Реферальный", "Топ"
  
  // Ценообразование
  minPricePerStory Decimal  // Минимальная цена за сторис
  commissionRate   Decimal  // Комиссия платформы (0.4, 0.5, 0.6, 0.8)
  
  // Требования для получения уровня
  minExecutions    Int      // Минимум выполненных заданий
  minRating        Decimal  // Минимальный рейтинг
  minDaysActive    Int      // Минимум дней активности
  
  // Настройки админа
  isActive         Boolean  @default(true)
  adminNotes       String?  // Заметки админа
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Связи
  users           User[]
  orders          Order[]
  
  @@map("trust_levels")
}

// Активация аккаунтов
model ActivationStory {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  platform    String   // "instagram", "tiktok", "vk"
  qrCodeId    String   // ID QR-кода для отслеживания
  screenshotUrl String? // URL скриншота
  status      ActivationStatus @default(PENDING)
  createdAt   DateTime @default(now())
  completedAt DateTime?
  
  @@map("activation_stories")
}

// Выплаты
model Payout {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  
  amount      Decimal  // Сумма выплаты
  method      PayoutMethod // Способ выплаты
  status      PayoutStatus @default(PENDING)
  
  // Банк СПБ
  bankAccountId String? // ID счета в банке
  transactionId String? // ID транзакции
  
  // Telegram Wallet
  telegramTransactionId String? // ID транзакции в Telegram
  
  createdAt   DateTime @default(now())
  processedAt DateTime?
  completedAt DateTime?
  
  @@map("payouts")
}

// Telegram верификация и мониторинг
model TelegramVerification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  
  telegramUsername String   // @username пользователя
  telegramUserId    String   // ID пользователя в Telegram
  isVerified       Boolean  @default(false)
  isMonitoring     Boolean  @default(false) // Мониторинг активен
  
  // Статистика
  storiesMonitored Int      @default(0)
  storiesApproved  Int      @default(0)
  lastStoryCheck   DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("telegram_verifications")
}

// Система уровней пользователей
enum UserLevel {
  NOVICE      // 40% - первые 3 дня, максимум 5 сторис/день
  VERIFIED    // 50% - 30 дней работы, 10 сторис/день
  REFERRAL    // 60% - 3 реферала + 100 дней работы
  TOP         // 80% - 100 выполненных заказов + высокая конверсия
}

// Роли пользователей
enum UserRole {
  CUSTOMER    // Заказчик рекламы
  EXECUTOR    // Исполнитель (размещает рекламу)
  MODERATOR_ADMIN  // Модератор-админ
  SUPER_ADMIN      // Супер-админ (бог)
}

// Социальные сети
enum SocialNetwork {
  INSTAGRAM
  TIKTOK
  VK
  TELEGRAM
  WHATSAPP
  FACEBOOK
}

// Статусы заказов
enum OrderStatus {
  PENDING     // Ожидает выполнения
  IN_PROGRESS // В процессе выполнения
  COMPLETED   // Выполнен
  CANCELLED   // Отменен
}

// Статусы выполнения
enum ExecutionStatus {
  PENDING       // Ожидает проверки
  UPLOADED      // Скриншот загружен
  PENDING_REVIEW // Ожидает модерации
  APPROVED      // Одобрено
  REJECTED      // Отклонено
  COMPLETED     // Завершено и оплачено
}

// Типы платежей
enum PaymentType {
  DEPOSIT         // Пополнение счета
  WITHDRAWAL      // Вывод средств
  COMMISSION      // Комиссия платформы
  EXECUTOR_PAYMENT // Выплата исполнителю
}

// Статусы платежей
enum PaymentStatus {
  PENDING     // Ожидает обработки
  PROCESSING  // Обрабатывается
  COMPLETED   // Завершен
  FAILED      // Неудачный
  CANCELLED   // Отменен
}

// Типы кампаний
enum CampaignType {
  SINGLE      // Одиночный заказ
  WEEKLY      // Недельная кампания
  BIWEEKLY    // Двухнедельная кампания
}

// Статусы возвратов
enum RefundStatus {
  PENDING     // Ожидает обработки
  PROCESSING  // Обрабатывается
  COMPLETED   // Завершен
  FAILED      // Неудачный
  CANCELLED   // Отменен
}

// Роли администраторов
enum AdminRole {
  SUPER_ADMIN      // Супер-админ (бог) - полные права
  MODERATOR_ADMIN  // Модератор-админ - ограниченные права
}

// Типы верификации
enum VerificationType {
  SMS       // SMS верификация
  EMAIL     // Email верификация
  TELEGRAM  // Telegram верификация
}

// Статусы активации
enum ActivationStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  REJECTED
}

// Способы выплат
enum PayoutMethod {
  BANK_SPB
  TELEGRAM_WALLET
}

// Статусы выплат
enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}
