import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcryptjs';
import { nanoid } from 'nanoid';

const prisma = new PrismaClient();

async function createTestData() {
  try {
    console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const testUsers = [
      // –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏
      {
        name: '–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤',
        email: 'alexey@test.com',
        phone: '+7 (999) 111-11-11',
        passwordHash: await bcrypt.hash('password123', 10),
        role: 'EXECUTOR',
        level: 'VERIFIED',
        balance: 15000,
        country: '–†–æ—Å—Å–∏—è',
        region: '–ú–æ—Å–∫–≤–∞',
        isVerified: true,
        telegramId: '111111111'
      },
      {
        name: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞',
        email: 'maria@test.com',
        phone: '+7 (999) 222-22-22',
        passwordHash: await bcrypt.hash('password123', 10),
        role: 'EXECUTOR',
        level: 'TOP',
        balance: 25000,
        country: '–†–æ—Å—Å–∏—è',
        region: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
        isVerified: true,
        telegramId: '222222222'
      },
      {
        name: '–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤',
        email: 'dmitry@test.com',
        phone: '+7 (999) 333-33-33',
        passwordHash: await bcrypt.hash('password123', 10),
        role: 'EXECUTOR',
        level: 'NOVICE',
        balance: 5000,
        country: '–†–æ—Å—Å–∏—è',
        region: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
        isVerified: false,
        telegramId: '333333333'
      },
      // –ó–∞–∫–∞–∑—á–∏–∫–∏
      {
        name: '–ê–Ω–Ω–∞ –í–æ–ª–∫–æ–≤–∞',
        email: 'anna@test.com',
        phone: '+7 (999) 444-44-44',
        passwordHash: await bcrypt.hash('password123', 10),
        role: 'CUSTOMER',
        level: 'VERIFIED',
        balance: 50000,
        country: '–†–æ—Å—Å–∏—è',
        region: '–ú–æ—Å–∫–≤–∞',
        isVerified: true,
        telegramId: '444444444'
      },
      {
        name: '–°–µ—Ä–≥–µ–π –ú–æ—Ä–æ–∑–æ–≤',
        email: 'sergey@test.com',
        phone: '+7 (999) 555-55-55',
        passwordHash: await bcrypt.hash('password123', 10),
        role: 'CUSTOMER',
        level: 'TOP',
        balance: 100000,
        country: '–†–æ—Å—Å–∏—è',
        region: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',
        isVerified: true,
        telegramId: '555555555'
      },
      {
        name: '–ï–ª–µ–Ω–∞ –ù–æ–≤–∏–∫–æ–≤–∞',
        email: 'elena@test.com',
        phone: '+7 (999) 666-66-66',
        passwordHash: await bcrypt.hash('password123', 10),
        role: 'CUSTOMER',
        level: 'NOVICE',
        balance: 15000,
        country: '–†–æ—Å—Å–∏—è',
        region: '–ö–∞–∑–∞–Ω—å',
        isVerified: false,
        telegramId: '666666666'
      }
    ];

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const createdUsers = [];
    for (const userData of testUsers) {
      try {
        const user = await prisma.user.create({
          data: userData
        });
        createdUsers.push(user);
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.name} (${user.role})`);
      } catch (error) {
        console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${userData.name}`);
      }
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
    const customers = createdUsers.filter(u => u.role === 'CUSTOMER');
    const executors = createdUsers.filter(u => u.role === 'EXECUTOR');

    if (customers.length > 0 && executors.length > 0) {
      const testOrders = [
        {
          title: '–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ Instagram',
          description: '–ù—É–∂–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º—É –Ω–æ–≤–æ–≥–æ –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ Instagram Stories. –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é.',
          targetAudience: '–ñ–µ–Ω—â–∏–Ω—ã 25-35 –ª–µ—Ç, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ—Å—è –∫–æ—Å–º–µ—Ç–∏–∫–æ–π',
          budget: 5000,
          reward: 500,
          region: '–ú–æ—Å–∫–≤–∞',
          socialNetwork: 'INSTAGRAM',
          quantity: 10,
          maxExecutions: 10,
          completedCount: 7,
          status: 'IN_PROGRESS',
          customerId: customers[0].id,
          qrCode: nanoid(),
          qrCodeExpiry: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
          deadline: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)
        },
        {
          title: '–†–µ–∫–ª–∞–º–∞ –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å–∞',
          description: '–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é. –ù—É–∂–Ω—ã –ø–æ—Å—Ç—ã —Å –æ—Ç–∑—ã–≤–∞–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.',
          targetAudience: '–ú–æ–ª–æ–¥–µ–∂—å 18-30 –ª–µ—Ç, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∞—è—Å—è IT',
          budget: 8000,
          reward: 800,
          region: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
          socialNetwork: 'VKONTAKTE',
          quantity: 15,
          maxExecutions: 15,
          completedCount: 12,
          status: 'IN_PROGRESS',
          customerId: customers[1].id,
          qrCode: nanoid(),
          qrCodeExpiry: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
          deadline: new Date(Date.now() + 10 * 24 * 60 * 60 * 1000)
        },
        {
          title: '–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞',
          description: '–†–µ–∫–ª–∞–º–∞ –Ω–æ–≤–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É. –ù—É–∂–Ω—ã –∫—Ä–∞—Å–∏–≤—ã–µ —Ñ–æ—Ç–æ –±–ª—é–¥.',
          targetAudience: '–õ—é–¥–∏ 25-45 –ª–µ—Ç, –ª—é–±—è—â–∏–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –µ–¥—É',
          budget: 3000,
          reward: 300,
          region: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
          socialNetwork: 'TELEGRAM',
          quantity: 5,
          maxExecutions: 5,
          completedCount: 5,
          status: 'COMPLETED',
          customerId: customers[0].id,
          qrCode: nanoid(),
          qrCodeExpiry: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
          deadline: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000)
        }
      ];

      for (const orderData of testOrders) {
        try {
          const order = await prisma.order.create({
            data: orderData
          });
          console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑: ${order.title}`);

          // –°–æ–∑–¥–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
          const orderExecutors = executors.slice(0, Math.min(3, executors.length));
          for (let i = 0; i < orderData.completedCount; i++) {
            const executor = orderExecutors[i % orderExecutors.length];
            const executionStatus = i < orderData.completedCount ? 'COMPLETED' : 'PENDING';
            
            try {
              await prisma.execution.create({
                data: {
                  orderId: order.id,
                  executorId: executor.id,
                  status: executionStatus,
                  clicks: Math.floor(Math.random() * 50) + 10,
                  screenshotUrl: `/uploads/screenshots/test-${nanoid()}.jpg`,
                  completedAt: executionStatus === 'COMPLETED' ? new Date() : null
                }
              });
            } catch (error) {
              console.log(`‚ö†Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ ${order.title}`);
            }
          }
        } catch (error) {
          console.log(`‚ö†Ô∏è –ó–∞–∫–∞–∑ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${orderData.title}`);
        }
      }
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–∏
    for (const user of createdUsers) {
      try {
        await prisma.payment.create({
          data: {
            userId: user.id,
            amount: user.balance,
            type: 'DEPOSIT',
            status: 'COMPLETED',
            description: '–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞'
          }
        });
      } catch (error) {
        console.log(`‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.name}`);
      }
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    for (const executor of executors) {
      try {
        await prisma.executorDailyLimit.create({
          data: {
            executorId: executor.id,
            socialNetwork: 'INSTAGRAM',
            dailyLimit: 5,
            usedToday: Math.floor(Math.random() * 3),
            resetDate: new Date()
          }
        });

        await prisma.executorDailyLimit.create({
          data: {
            executorId: executor.id,
            socialNetwork: 'VKONTAKTE',
            dailyLimit: 3,
            usedToday: Math.floor(Math.random() * 2),
            resetDate: new Date()
          }
        });
      } catch (error) {
        console.log(`‚ö†Ô∏è –õ–∏–º–∏—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ${executor.name}`);
      }
    }

    console.log('üéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!');
    console.log('\nüìã –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:');
    console.log('üë• –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:');
    executors.forEach(executor => {
      console.log(`  - ${executor.name}: ${executor.phone} / password123 (–ë–∞–ª–∞–Ω—Å: ${executor.balance}‚ÇΩ)`);
    });
    console.log('\nüíº –ó–∞–∫–∞–∑—á–∏–∫–∏:');
    customers.forEach(customer => {
      console.log(`  - ${customer.name}: ${customer.phone} / password123 (–ë–∞–ª–∞–Ω—Å: ${customer.balance}‚ÇΩ)`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createTestData();
