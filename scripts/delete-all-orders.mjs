import { PrismaClient } from '@prisma/client';
import { config } from 'dotenv';
import { resolve } from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config({ path: resolve(process.cwd(), '.env.local') });

const prisma = new PrismaClient();

async function deleteAllOrders() {
  try {
    console.log('üßπ –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –í–°–ï–• –∑–∞–∫–∞–∑–æ–≤...\n');
    
    // 1. –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–∏–∑-–∑–∞ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π)
    console.log('üìã –®–∞–≥ 1: –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π...');
    const deletedExecutions = await prisma.execution.deleteMany({});
    console.log(`   ‚úÖ –£–¥–∞–ª–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: ${deletedExecutions.count}\n`);
    
    // 2. –£–¥–∞–ª—è–µ–º –í–°–ï –∑–∞–∫–∞–∑—ã –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    console.log('üì¶ –®–∞–≥ 2: –£–¥–∞–ª–µ–Ω–∏–µ –í–°–ï–• –∑–∞–∫–∞–∑–æ–≤...');
    const deletedOrders = await prisma.order.deleteMany({});
    console.log(`   ‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${deletedOrders.count}\n`);
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –∏ –∏—Ö –∑–∞–∫–∞–∑—ã
    console.log('üë§ –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const allUsers = await prisma.user.findMany({
      where: {
        id: {
          not: 'admin-god'
        }
      },
      include: {
        orders: true
      }
    });
    
    console.log(`   –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${allUsers.length}`);
    for (const user of allUsers) {
      console.log(`   - ${user.name} (${user.email || user.phone}): ${user.orders.length} –∑–∞–∫–∞–∑–æ–≤`);
    }
    
    console.log('\n‚ú® –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

deleteAllOrders();






