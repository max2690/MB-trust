import { PrismaClient } from '@prisma/client';
import { config } from 'dotenv';
import { resolve } from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config({ path: resolve(process.cwd(), '.env.local') });

const prisma = new PrismaClient();

async function deleteTestOrders() {
  try {
    console.log('üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π...');
    
    // –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
    // –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ —É—Å–ª–æ–≤–∏—é, –Ω–∞–ø—Ä–∏–º–µ—Ä –ø–æ customerId —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–ª–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    const testOrders = await prisma.order.findMany({
      where: {
        OR: [
          { customerId: { startsWith: 'test-' } },
          { title: { contains: '–¢–µ—Å—Ç' } },
          { description: { contains: '—Ç–µ—Å—Ç' } }
        ]
      },
      include: {
        executions: true
      }
    });

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${testOrders.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤`);

    // –£–¥–∞–ª—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–Ω–∞—á–∞–ª–∞ (–∏–∑-–∑–∞ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π)
    for (const order of testOrders) {
      if (order.executions.length > 0) {
        await prisma.execution.deleteMany({
          where: { orderId: order.id }
        });
        console.log(`  ‚úÖ –£–¥–∞–ª–µ–Ω–æ ${order.executions.length} –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞: ${order.title}`);
      }
    }

    // –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑—ã
    const deletedOrders = await prisma.order.deleteMany({
      where: {
        OR: [
          { customerId: { startsWith: 'test-' } },
          { title: { contains: '–¢–µ—Å—Ç' } },
          { description: { contains: '—Ç–µ—Å—Ç' } }
        ]
      }
    });

    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${deletedOrders.count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤`);
    
    // –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å)
    // const allOrders = await prisma.order.deleteMany({});
    // console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤: ${allOrders.count}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤:', error);
  } finally {
    await prisma.$disconnect();
  }
}

deleteTestOrders();
