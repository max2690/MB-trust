'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import Link from 'next/link';

interface TestOrder {
  id: string;
  title: string;
  description: string;
  platform: string;
  quantity: number;
  pricePerStory: number;
  totalReward: number;
  status: string;
  createdAt: string;
  executions: any[];
}

export default function TestPage() {
  const [testOrders, setTestOrders] = useState<TestOrder[]>([]);
  const [loading, setLoading] = useState(false);
  const [creatingOrder, setCreatingOrder] = useState(false);

  // –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
  const [formData, setFormData] = useState({
    platform: 'instagram',
    quantity: 1,
    pricePerStory: 100,
    description: '',
    title: '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑'
  });

  useEffect(() => {
    fetchTestOrders();
  }, []);

  const fetchTestOrders = async () => {
    setLoading(true);
    try {
      const response = await fetch('/api/test/orders');
      const data = await response.json();
      
      if (data.success) {
        setTestOrders(data.orders);
      }
    } catch (error) {
      console.error('Error fetching test orders:', error);
    } finally {
      setLoading(false);
    }
  };

  const createTestOrder = async () => {
    setCreatingOrder(true);
    try {
      const response = await fetch('/api/test/orders', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });

      const data = await response.json();
      
      if (data.success) {
        alert('–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!');
        fetchTestOrders(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        setFormData({
          platform: 'instagram',
          quantity: 1,
          pricePerStory: 100,
          description: '',
          title: '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑'
        });
      } else {
        alert(data.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞');
      }
    } catch (error) {
      console.error('Error creating test order:', error);
      alert('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞');
    } finally {
      setCreatingOrder(false);
    }
  };

  const acceptTestOrder = async (orderId: string) => {
    try {
      const response = await fetch(`/api/test/orders/${orderId}/accept`, {
        method: 'POST',
      });

      const data = await response.json();
      
      if (data.success) {
        alert('–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!');
        fetchTestOrders(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
      } else {
        alert(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞');
      }
    } catch (error) {
      console.error('Error accepting test order:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞');
    }
  };

  const getStatusBadge = (status: string) => {
    const statusMap: { [key: string]: { text: string; className: string } } = {
      PENDING: { text: '–û–∂–∏–¥–∞–µ—Ç', className: 'bg-yellow-100 text-yellow-800' },
      IN_PROGRESS: { text: '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è', className: 'bg-blue-100 text-blue-800' },
      COMPLETED: { text: '–ó–∞–≤–µ—Ä—à–µ–Ω', className: 'bg-green-100 text-green-800' },
      CANCELLED: { text: '–û—Ç–º–µ–Ω–µ–Ω', className: 'bg-red-100 text-red-800' }
    };
    
    const statusInfo = statusMap[status] || { text: status, className: 'bg-gray-100 text-gray-800' };
    
    return (
      <span className={`px-2 py-1 rounded-full text-xs font-medium ${statusInfo.className}`}>
        {statusInfo.text}
      </span>
    );
  };

  return (
    <div className="container mx-auto p-6">
      <div className="mb-6">
        <h1 className="text-3xl font-bold">üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º</h1>
        <p className="text-gray-600 mt-2">
          –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ —Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∑–∞–∫–∞–∑—ã –±–µ–∑ —Å–ø–∏—Å–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–µ–Ω–µ–≥
        </p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ */}
        <Card>
          <CardHeader>
            <CardTitle>üéØ –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div>
                <Label>–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞</Label>
                <Input
                  value={formData.title}
                  onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                  placeholder="–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑"
                  className="mt-1"
                />
              </div>
              
              <div>
                <Label>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞</Label>
                <Select value={formData.platform} onValueChange={(value: string) => setFormData({ ...formData, platform: value })}>
                  <SelectTrigger className="mt-1">
                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="instagram">Instagram</SelectItem>
                    <SelectItem value="tiktok">TikTok</SelectItem>
                    <SelectItem value="vk">VK</SelectItem>
                    <SelectItem value="telegram">Telegram</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              <div>
                <Label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ—Ä–∏—Å</Label>
                <Input
                  type="number"
                  min="1"
                  max="50"
                  value={formData.quantity}
                  onChange={(e) => setFormData({ ...formData, quantity: parseInt(e.target.value) })}
                  className="mt-1"
                />
              </div>
              
              <div>
                <Label>–¶–µ–Ω–∞ –∑–∞ —Å—Ç–æ—Ä–∏—Å (‚ÇΩ)</Label>
                <Input
                  type="number"
                  min="50"
                  value={formData.pricePerStory}
                  onChange={(e) => setFormData({ ...formData, pricePerStory: parseInt(e.target.value) })}
                  className="mt-1"
                />
              </div>
              
              <div>
                <Label>–û–ø–∏—Å–∞–Ω–∏–µ</Label>
                <Textarea
                  value={formData.description}
                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                  placeholder="–û–ø–∏—à–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å..."
                  className="mt-1"
                  rows={3}
                />
              </div>
              
              <div className="bg-gray-50 p-4 rounded-lg">
                <h4 className="font-semibold mb-2">–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏:</h4>
                <div className="space-y-1 text-sm">
                  <div className="flex justify-between">
                    <span>–¶–µ–Ω–∞ –∑–∞ —Å—Ç–æ—Ä–∏—Å:</span>
                    <span>{formData.pricePerStory}‚ÇΩ</span>
                  </div>
                  <div className="flex justify-between">
                    <span>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</span>
                    <span>{formData.quantity}</span>
                  </div>
                  <div className="flex justify-between font-semibold">
                    <span>–û–±—â–∞—è —Å—É–º–º–∞:</span>
                    <span>{formData.pricePerStory * formData.quantity}‚ÇΩ</span>
                  </div>
                  <div className="flex justify-between text-sm text-gray-600">
                    <span>–ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (10%):</span>
                    <span>{(formData.pricePerStory * formData.quantity * 0.1).toFixed(0)}‚ÇΩ</span>
                  </div>
                  <div className="flex justify-between text-sm text-green-600">
                    <span>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç:</span>
                    <span>{(formData.pricePerStory * formData.quantity * 0.9).toFixed(0)}‚ÇΩ</span>
                  </div>
                </div>
              </div>
              
              <Button 
                onClick={createTestOrder}
                disabled={creatingOrder}
                className="w-full bg-green-600 hover:bg-green-700"
              >
                {creatingOrder ? '–°–æ–∑–¥–∞–µ–º...' : 'üß™ –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑'}
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤ */}
        <Card>
          <CardHeader>
            <CardTitle>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div className="text-center p-4 bg-blue-50 rounded-lg">
                  <div className="text-2xl font-bold text-blue-600">
                    {testOrders.length}
                  </div>
                  <div className="text-sm text-blue-600">–°–æ–∑–¥–∞–Ω–æ –∑–∞–∫–∞–∑–æ–≤</div>
                </div>
                <div className="text-center p-4 bg-green-50 rounded-lg">
                  <div className="text-2xl font-bold text-green-600">
                    {testOrders.filter(order => order.status === 'COMPLETED').length}
                  </div>
                  <div className="text-sm text-green-600">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</div>
                </div>
              </div>
              
              <div className="text-center p-4 bg-purple-50 rounded-lg">
                <div className="text-2xl font-bold text-purple-600">
                  {testOrders.reduce((sum, order) => sum + order.executions.length, 0)}
                </div>
                <div className="text-sm text-purple-600">AI –ø—Ä–æ–≤–µ—Ä–æ–∫</div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ */}
      <Card className="mt-6">
        <CardHeader>
          <CardTitle>üìã –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã</CardTitle>
        </CardHeader>
        <CardContent>
          {loading ? (
            <div className="text-center py-8">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
          ) : testOrders.length === 0 ? (
            <div className="text-center py-8 text-gray-500">
              –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            </div>
          ) : (
            <div className="space-y-4">
              {testOrders.map((order) => (
                <div key={order.id} className="border rounded-lg p-4">
                  <div className="flex items-center justify-between mb-2">
                    <h3 className="font-semibold">{order.title}</h3>
                    {getStatusBadge(order.status)}
                  </div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-4 gap-4 text-sm">
                    <div>
                      <span className="font-semibold">–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</span> {order.platform}
                    </div>
                    <div>
                      <span className="font-semibold">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</span> {order.quantity} —Å—Ç–æ—Ä–∏—Å
                    </div>
                    <div>
                      <span className="font-semibold">–¶–µ–Ω–∞:</span> {order.pricePerStory}‚ÇΩ –∑–∞ —Å—Ç–æ—Ä–∏—Å
                    </div>
                    <div>
                      <span className="font-semibold">–û–±—â–∞—è —Å—É–º–º–∞:</span> {order.totalReward}‚ÇΩ
                    </div>
                  </div>
                  
                  <div className="mt-3 flex space-x-2">
                    {order.status === 'PENDING' && (
                      <Button 
                        onClick={() => acceptTestOrder(order.id)}
                        size="sm"
                        className="bg-blue-600 hover:bg-blue-700"
                      >
                        –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑
                      </Button>
                    )}
                    
                    {order.status === 'IN_PROGRESS' && (
                      <Button asChild size="sm" variant="outline">
                        <Link href={`/test/execute/${order.id}`}>
                          –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑
                        </Link>
                      </Button>
                    )}
                    
                    <Button asChild size="sm" variant="outline">
                      <Link href={`/test/orders/${order.id}`}>
                        –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                      </Link>
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
