'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card } from '@/components/ui/card';
import { Label } from '@/components/ui/label';

export default function AdminModeratorLoginPage() {
  const [login, setLogin] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [verificationStep, setVerificationStep] = useState<'login' | 'sms' | 'email'>('login');
  const [session, setSession] = useState<any>(null);
  const [admin, setAdmin] = useState<any>(null);
  const [smsCode, setSmsCode] = useState('');
  const [emailCode, setEmailCode] = useState('');
  const [verificationStatus, setVerificationStatus] = useState({
    sms: false,
    email: false
  });

  const router = useRouter();

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    // üöÄ –ö–û–°–¢–´–õ–¨ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø - –ª—é–±–æ–π –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –ø—Ä–æ—Ö–æ–¥–∏—Ç
    if (process.env.NODE_ENV === 'development') {
      console.log('üî• DEV MODE: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏');
      setTimeout(() => {
        router.push('/admin-moderator/dashboard');
      }, 500);
      return;
    }

    try {
      const response = await fetch('/api/admin/auth/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ login, password })
      });

      const data = await response.json();

      if (data.success) {
        setSession(data.session);
        setAdmin(data.admin);
        setVerificationStep('sms');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–æ–≤
        if (data.verification.methods.length > 0) {
          console.log('–ö–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:', data.verification.methods);
        }
      } else {
        setError(data.error || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞');
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    } finally {
      setLoading(false);
    }
  };

  const handleVerification = async (type: 'sms' | 'email') => {
    const code = type === 'sms' ? smsCode : emailCode;
    
    if (!code) {
      setError('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥');
      return;
    }

    setLoading(true);
    setError('');

    try {
      const response = await fetch('/api/admin/auth/verify', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          token: session.token, 
          code, 
          type 
        })
      });

      const data = await response.json();

      if (data.success) {
        setVerificationStatus(prev => ({ ...prev, [type]: true }));
        
        if (data.fullyVerified) {
          // –ü–æ–ª–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
          localStorage.setItem('adminToken', session.token);
          localStorage.setItem('adminRole', admin.role);
          router.push('/admin-moderator/dashboard');
        } else {
          // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
          if (type === 'sms' && !verificationStatus.email) {
            setVerificationStep('email');
          }
        }
      } else {
        setError(data.error || '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥');
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    } finally {
      setLoading(false);
    }
  };

  if (verificationStep === 'sms') {
    return (
      <div className="min-h-screen bg-mb-black flex items-center justify-center p-4">
        <Card className="w-full max-w-md p-6">
          <div className="text-center mb-6">
            <h1 className="text-2xl font-bold text-white mb-2">üîê SMS –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è</h1>
            <p className="text-mb-gray">
              –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä {admin?.phone}
            </p>
          </div>

          <div className="space-y-4">
            <div>
              <Label htmlFor="smsCode">SMS –∫–æ–¥</Label>
              <Input
                id="smsCode"
                type="text"
                value={smsCode}
                onChange={(e) => setSmsCode(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS"
                className="text-center text-lg tracking-widest"
                maxLength={6}
              />
            </div>

            {error && (
              <div className="text-mb-red text-sm text-center">{error}</div>
            )}

            <Button
              onClick={() => handleVerification('sms')}
              disabled={loading || !smsCode}
              className="w-full"
            >
              {loading ? '–ü—Ä–æ–≤–µ—Ä–∫–∞...' : '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å SMS'}
            </Button>
          </div>
        </Card>
      </div>
    );
  }

  if (verificationStep === 'email') {
    return (
      <div className="min-h-screen bg-mb-black flex items-center justify-center p-4">
        <Card className="w-full max-w-md p-6">
          <div className="text-center mb-6">
            <h1 className="text-2xl font-bold text-white mb-2">üìß Email –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è</h1>
            <p className="text-mb-gray">
              –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {admin?.email}
            </p>
          </div>

          <div className="space-y-4">
            <div>
              <Label htmlFor="emailCode">Email –∫–æ–¥</Label>
              <Input
                id="emailCode"
                type="text"
                value={emailCode}
                onChange={(e) => setEmailCode(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ email"
                className="text-center text-lg tracking-widest"
                maxLength={6}
              />
            </div>

            {error && (
              <div className="text-mb-red text-sm text-center">{error}</div>
            )}

            <Button
              onClick={() => handleVerification('email')}
              disabled={loading || !emailCode}
              className="w-full"
            >
              {loading ? '–ü—Ä–æ–≤–µ—Ä–∫–∞...' : '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å Email'}
            </Button>
          </div>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-mb-black flex items-center justify-center p-4">
      <Card className="w-full max-w-md p-6">
        <div className="text-center mb-6">
          <h1 className="text-3xl font-bold text-white mb-2">üü° –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä-–ê–¥–º–∏–Ω</h1>
          <p className="text-mb-gray">–í—Ö–æ–¥ –≤ –ø–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞</p>
        </div>

        <form onSubmit={handleLogin} className="space-y-4">
          <div>
            <Label htmlFor="login">–õ–æ–≥–∏–Ω</Label>
            <Input
              id="login"
              type="text"
              value={login}
              onChange={(e) => setLogin(e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω"
              required
            />
          </div>

          <div>
            <Label htmlFor="password">–ü–∞—Ä–æ–ª—å</Label>
            <Input
              id="password"
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
              required
            />
          </div>

          {error && (
            <div className="text-mb-red text-sm text-center">{error}</div>
          )}

          <Button
            type="submit"
            disabled={loading || !login || !password}
            className="w-full bg-mb-gold hover:bg-mb-gold/90"
          >
            {loading ? '–í—Ö–æ–¥...' : '–í–æ–π—Ç–∏'}
          </Button>
        </form>

        <div className="mt-6 text-center">
          <p className="text-mb-gray text-sm">
            –î–≤–æ–π–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: SMS + Email
          </p>
        </div>
      </Card>
    </div>
  );
}

