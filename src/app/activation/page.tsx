'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';

export default function ActivationPage() {
  const [userId, setUserId] = useState('');
  const [platform, setPlatform] = useState('instagram');
  const [qrCode, setQrCode] = useState('');
  const [activationId, setActivationId] = useState('');
  const [screenshot, setScreenshot] = useState<File | null>(null);
  const [status, setStatus] = useState<'idle' | 'generating' | 'uploading' | 'verifying' | 'completed'>('idle');
  const [result, setResult] = useState<any>(null);

  const generateQRCode = async () => {
    if (!userId) {
      alert('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }

    setStatus('generating');
    try {
      const response = await fetch('/api/activation/qr-code', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ userId, platform }),
      });

      const data = await response.json();
      
      if (data.success) {
        setQrCode(data.qrCode);
        setActivationId(data.activationId);
        setStatus('idle');
      } else {
        alert(data.error || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞');
        setStatus('idle');
      }
    } catch (error) {
      console.error('Error generating QR code:', error);
      alert('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞');
      setStatus('idle');
    }
  };

  const handleScreenshotUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setScreenshot(file);
    }
  };

  const verifyActivation = async () => {
    if (!screenshot || !activationId) {
      alert('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥');
      return;
    }

    setStatus('verifying');
    try {
      const formData = new FormData();
      formData.append('screenshot', screenshot);
      formData.append('userId', userId);
      formData.append('activationId', activationId);

      const response = await fetch('/api/activation/verify', {
        method: 'POST',
        body: formData,
      });

      const data = await response.json();
      
      setResult(data);
      setStatus('completed');
    } catch (error) {
      console.error('Error verifying activation:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏');
      setStatus('idle');
    }
  };

  const resetForm = () => {
    setUserId('');
    setPlatform('instagram');
    setQrCode('');
    setActivationId('');
    setScreenshot(null);
    setStatus('idle');
    setResult(null);
  };

  return (
    <div className="container mx-auto p-6">
      <div className="mb-6">
        <h1 className="text-3xl font-bold">üéØ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞</h1>
        <p className="text-gray-600 mt-2">
          –°–æ–∑–¥–∞–π—Ç–µ QR-–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö
        </p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ */}
        <Card>
          <CardHeader>
            <CardTitle>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div>
                <Label>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</Label>
                <Input
                  value={userId}
                  onChange={(e) => setUserId(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                  className="mt-1"
                />
              </div>
              
              <div>
                <Label>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞</Label>
                <Select value={platform} onValueChange={setPlatform}>
                  <SelectTrigger className="mt-1">
                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="instagram">Instagram</SelectItem>
                    <SelectItem value="tiktok">TikTok</SelectItem>
                    <SelectItem value="vk">VK</SelectItem>
                    <SelectItem value="telegram">Telegram</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              <Button 
                onClick={generateQRCode}
                disabled={!userId || status === 'generating'}
                className="w-full"
              >
                {status === 'generating' ? '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º...' : '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥'}
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* QR-–∫–æ–¥ */}
        {qrCode && (
          <Card>
            <CardHeader>
              <CardTitle>üì± QR-–∫–æ–¥ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-center">
                <img 
                  src={qrCode} 
                  alt="QR Code" 
                  className="mx-auto mb-4 border rounded-lg"
                  style={{ maxWidth: '300px' }}
                />
                <p className="text-sm text-gray-600 mb-4">
                  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç QR-–∫–æ–¥ –≤ —Å–≤–æ–µ–π —Å—Ç–æ—Ä–∏—Å
                </p>
                <Button 
                  onClick={() => {
                    const link = document.createElement('a');
                    link.href = qrCode;
                    link.download = `activation-qr-${userId}.png`;
                    link.click();
                  }}
                  variant="outline"
                  className="w-full"
                >
                  üì• –°–∫–∞—á–∞—Ç—å QR-–∫–æ–¥
                </Button>
              </div>
            </CardContent>
          </Card>
        )}
      </div>

      {/* –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ */}
      {qrCode && (
        <Card className="mt-6">
          <CardHeader>
            <CardTitle>üì∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div>
                <Label>–°–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è</Label>
                <Input
                  type="file"
                  accept="image/*"
                  onChange={handleScreenshotUpload}
                  className="mt-1"
                />
                <p className="text-sm text-gray-600 mt-1">
                  –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è QR-–∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                </p>
              </div>
              
              {screenshot && (
                <div className="space-y-4">
                  <div>
                    <img 
                      src={URL.createObjectURL(screenshot)} 
                      alt="Screenshot preview" 
                      className="max-w-full h-auto rounded-lg border"
                      style={{ maxHeight: '300px' }}
                    />
                  </div>
                  
                  <Button 
                    onClick={verifyActivation}
                    disabled={status === 'verifying'}
                    className="w-full bg-green-600 hover:bg-green-700"
                  >
                    {status === 'verifying' ? '–ü—Ä–æ–≤–µ—Ä—è–µ–º...' : '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é'}
                  </Button>
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      )}

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ */}
      {result && (
        <Card className="mt-6">
          <CardHeader>
            <CardTitle>ü§ñ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏</CardTitle>
          </CardHeader>
          <CardContent>
            <div className={`p-4 rounded-lg ${
              result.success ? 'bg-green-50 border border-green-200' : 'bg-red-50 border border-red-200'
            }`}>
              <div className={`text-lg font-semibold ${
                result.success ? 'text-green-800' : 'text-red-800'
              }`}>
                {result.success ? '‚úÖ –ê–∫—Ç–∏–≤–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!' : '‚ùå –ê–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞'}
              </div>
              <p className={`mt-2 ${
                result.success ? 'text-green-700' : 'text-red-700'
              }`}>
                {result.message}
              </p>
              
              {result.details && (
                <div className="mt-4 text-sm">
                  <div className="font-semibold mb-2">–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:</div>
                  <div className="space-y-1">
                    <div>QR-–∫–æ–¥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {result.details.qrCodeDetected ? '‚úÖ' : '‚ùå'}</div>
                    <div>–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ: {result.details.platformMatch ? '‚úÖ' : '‚ùå'}</div>
                    <div>–ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {result.details.qualityScore?.toFixed(2)}</div>
                  </div>
                </div>
              )}
            </div>
            
            <div className="mt-4">
              <Button 
                onClick={resetForm}
                variant="outline"
                className="w-full"
              >
                üîÑ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∞–∫—Ç–∏–≤–∞—Ü–∏—é
              </Button>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
