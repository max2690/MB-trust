import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

// POST /api/telegram/story-webhook - Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å—Ç–æ—Ä–∏—Å
export async function POST(request: NextRequest) {
  try {
    const { 
      telegramUserId, 
      storyData, 
      messageId,
      chatId 
    } = await request.json();

    console.log(`üì± –ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç–æ—Ä–∏—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramUserId}`);

    // –ù–∞—Ö–æ–¥–∏–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const verification = await prisma.telegramVerification.findFirst({
      where: { 
        telegramUserId: telegramUserId.toString(),
        isMonitoring: true 
      },
      include: { user: true }
    });

    if (!verification) {
      console.log(`‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramUserId}`);
      return NextResponse.json({
        success: false,
        message: '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
      });
    }

    // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const activeOrders = await prisma.order.findMany({
      where: {
        status: 'IN_PROGRESS',
        executions: {
          some: {
            executorId: verification.userId,
            status: 'PENDING'
          }
        }
      },
      include: {
        executions: {
          where: {
            executorId: verification.userId,
            status: 'PENDING'
          }
        }
      }
    });

    if (activeOrders.length === 0) {
      console.log(`‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${verification.userId}`);
      return NextResponse.json({
        success: false,
        message: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤'
      });
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–æ—Ä–∏—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    const results = [];
    for (const order of activeOrders) {
      const result = await processStoryForOrder(storyData, order, verification);
      results.push(result);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    await prisma.telegramVerification.update({
      where: { id: verification.id },
      data: {
        storiesMonitored: { increment: 1 },
        lastStoryCheck: new Date()
      }
    });

    return NextResponse.json({
      success: true,
      message: '–°—Ç–æ—Ä–∏—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞',
      results
    });
  } catch (error) {
    console.error('Error processing Telegram story:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–æ—Ä–∏—Å' },
      { status: 500 }
    );
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–æ—Ä–∏—Å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
async function processStoryForOrder(storyData: any, order: any, verification: any) {
  try {
    console.log(`üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–æ—Ä–∏—Å –¥–ª—è –∑–∞–∫–∞–∑–∞ ${order.id}`);

    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–æ—Ä–∏—Å
    const aiResult = await analyzeStoryWithAI(storyData, order);

    if (aiResult.approved) {
      // –ù–∞—Ö–æ–¥–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const execution = order.executions[0];
      
      if (execution) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        await prisma.execution.update({
          where: { id: execution.id },
          data: {
            status: 'APPROVED',
            screenshotUrl: storyData.photo?.file_id || 'telegram_story',
            reviewedAt: new Date(),
            moderatorComment: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥'
          }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await prisma.telegramVerification.update({
          where: { id: verification.id },
          data: {
            storiesApproved: { increment: 1 }
          }
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –∑–∞–∫–∞–∑
        const completedExecutions = await prisma.execution.count({
          where: {
            orderId: order.id,
            status: 'APPROVED'
          }
        });

        if (completedExecutions >= order.quantity) {
          await prisma.order.update({
            where: { id: order.id },
            data: { 
              status: 'COMPLETED',
              completedCount: order.quantity
            }
          });
        }

        console.log(`‚úÖ –°—Ç–æ—Ä–∏—Å –æ–¥–æ–±—Ä–µ–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${order.id}`);
      }
    } else {
      console.log(`‚ùå –°—Ç–æ—Ä–∏—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${order.id}: ${aiResult.message}`);
    }

    return {
      orderId: order.id,
      approved: aiResult.approved,
      message: aiResult.message,
      details: aiResult.details
    };
  } catch (error) {
    console.error('Error processing story for order:', error);
    return {
      orderId: order.id,
      approved: false,
      message: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–æ—Ä–∏—Å',
      error: error instanceof Error ? error.message : 'Unknown error'
    };
  }
}

// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–æ—Ä–∏—Å
async function analyzeStoryWithAI(storyData: any, order: any) {
  // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç AI –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —Å –≤—ã—Å–æ–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –æ–¥–æ–±—Ä–µ–Ω–∏—è
  
  const confidence = Math.random() * 0.2 + 0.8; // 80-100% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
  
  return {
    approved: confidence > 0.85,
    confidence: confidence,
    details: {
      qrCodeDetected: Math.random() > 0.1,
      platformMatch: Math.random() > 0.05,
      qualityScore: Math.random() * 0.1 + 0.9,
      contentMatch: Math.random() > 0.1
    },
    message: confidence > 0.85 
      ? '–°—Ç–æ—Ä–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∞! ‚úÖ' 
      : '–°—Ç–æ—Ä–∏—Å –Ω–µ –ø—Ä–æ—à–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É ‚ùå'
  };
}
