import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

// POST /api/verification/nalog - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∞–º–æ–∑–∞–Ω—è—Ç–æ–≥–æ
export async function POST(request: NextRequest) {
  try {
    const { innNumber, userId } = await request.json();

    if (!innNumber || !userId) {
      return NextResponse.json(
        { error: '–ò–ù–ù –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { id: userId }
    });

    if (!user) {
      return NextResponse.json(
        { error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∞–º–æ–∑–∞–Ω—è—Ç–æ–≥–æ —á–µ—Ä–µ–∑ nalog.ru
    const verificationResult = await verifySelfEmployedStatus(innNumber);

    if (verificationResult.verified) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await prisma.user.update({
        where: { id: userId },
        data: {
          isSelfEmployed: true,
          innNumber: innNumber,
          nalogVerificationStatus: 'VERIFIED',
          nalogVerifiedAt: new Date()
        }
      });

      return NextResponse.json({
        success: true,
        message: '–°—Ç–∞—Ç—É—Å —Å–∞–º–æ–∑–∞–Ω—è—Ç–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
        verified: true,
        details: verificationResult.details
      });
    } else {
      return NextResponse.json({
        success: false,
        message: verificationResult.message,
        verified: false
      }, { status: 400 });
    }
  } catch (error) {
    console.error('Error verifying self-employed status:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∞–º–æ–∑–∞–Ω—è—Ç–æ–≥–æ' },
      { status: 500 }
    );
  }
}

// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∞–º–æ–∑–∞–Ω—è—Ç–æ–≥–æ —á–µ—Ä–µ–∑ nalog.ru
async function verifySelfEmployedStatus(innNumber: string) {
  // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API nalog.ru
  // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —Å –≤—ã—Å–æ–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é —É—Å–ø–µ—Ö–∞
  
  console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∞–º–æ–∑–∞–Ω—è—Ç–æ–≥–æ –¥–ª—è –ò–ù–ù: ${innNumber}`);
  
  // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
  const isValidINN = innNumber.length === 12 && /^\d+$/.test(innNumber);
  
  if (!isValidINN) {
    return {
      verified: false,
      status: 'INVALID_INN',
      message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ò–ù–ù'
    };
  }
  
  // –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
  return {
    verified: true,
    status: 'VERIFIED',
    message: '–°—Ç–∞—Ç—É—Å —Å–∞–º–æ–∑–∞–Ω—è—Ç–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
    details: {
      inn: innNumber,
      status: 'ACTIVE',
      registrationDate: '2023-01-01',
      lastActivity: new Date().toISOString()
    }
  };
}