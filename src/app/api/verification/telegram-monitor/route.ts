import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

// POST /api/verification/telegram-monitor - –ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞
export async function POST(request: NextRequest) {
  try {
    const { userId, telegramUsername } = await request.json();

    if (!userId || !telegramUsername) {
      return NextResponse.json(
        { error: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ Telegram username –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { id: userId }
    });

    if (!user) {
      return NextResponse.json(
        { error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      );
    }

    // –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
    const cleanUsername = telegramUsername.replace('@', '');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç
    const existingUsernameVerification = await prisma.telegramVerification.findFirst({
      where: {
        OR: [
          { telegramUsername: cleanUsername },
          { telegramUsername: `@${cleanUsername}` }
        ]
      }
    });

    if (existingUsernameVerification && existingUsernameVerification.userId !== userId) {
      return NextResponse.json(
        { error: '–≠—Ç–æ—Ç Telegram –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º' },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existingUserVerification = await prisma.telegramVerification.findFirst({
      where: { userId }
    });

    let verification;
    if (existingUserVerification) {
      verification = await prisma.telegramVerification.update({
        where: { id: existingUserVerification.id },
        data: {
          telegramUsername: `@${cleanUsername}`,
          isMonitoring: true,
          lastStoryCheck: new Date()
        }
      });
    } else {
      verification = await prisma.telegramVerification.create({
        data: {
          userId,
          telegramUsername: `@${cleanUsername}`,
          telegramUserId: '', // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –±–æ—Ç–æ–º
          isVerified: false,
          isMonitoring: true,
          storiesMonitored: 0,
          storiesApproved: 0,
          lastStoryCheck: new Date()
        }
      });
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –±–æ—Ç—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    await startTelegramMonitoring(verification.id, cleanUsername);

    return NextResponse.json({
      success: true,
      verification,
      message: '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞ –∑–∞–ø—É—â–µ–Ω'
    });
  } catch (error) {
    console.error('Error starting Telegram monitoring:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Telegram' },
      { status: 500 }
    );
  }
}

// GET /api/verification/telegram-monitor - –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const userId = searchParams.get('userId');

    if (!userId) {
      return NextResponse.json(
        { error: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' },
        { status: 400 }
      );
    }

    const verification = await prisma.telegramVerification.findFirst({
      where: { userId }
    });

    if (!verification) {
      return NextResponse.json({
        success: true,
        monitoring: false,
        message: '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
      });
    }

    return NextResponse.json({
      success: true,
      monitoring: verification.isMonitoring,
      verification: {
        telegramUsername: verification.telegramUsername,
        isVerified: verification.isVerified,
        storiesMonitored: verification.storiesMonitored,
        storiesApproved: verification.storiesApproved,
        lastStoryCheck: verification.lastStoryCheck
      }
    });
  } catch (error) {
    console.error('Error getting Telegram monitoring status:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞' },
      { status: 500 }
    );
  }
}

// PUT /api/verification/telegram-monitor - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
export async function PUT(request: NextRequest) {
  try {
    const { userId } = await request.json();

    if (!userId) {
      return NextResponse.json(
        { error: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' },
        { status: 400 }
      );
    }

    const verification = await prisma.telegramVerification.findFirst({
      where: { userId }
    });

    if (!verification) {
      return NextResponse.json(
        { error: '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' },
        { status: 404 }
      );
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    await prisma.telegramVerification.update({
      where: { id: verification.id },
      data: { isMonitoring: false }
    });

    return NextResponse.json({
      success: true,
      message: '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Telegram –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
    });
  } catch (error) {
    console.error('Error stopping Telegram monitoring:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞' },
      { status: 500 }
    );
  }
}

// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
async function startTelegramMonitoring(verificationId: string, username: string) {
  // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–º–∞–Ω–¥–∞ –±–æ—Ç—É –Ω–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
  console.log(`ü§ñ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è @${username} (ID: ${verificationId})`);
  
  // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  const mockTelegramUserId = Math.floor(Math.random() * 1000000).toString();
  
  // –û–±–Ω–æ–≤–ª—è–µ–º telegramUserId
  await prisma.telegramVerification.update({
    where: { id: verificationId },
    data: { telegramUserId: mockTelegramUserId }
  });
}
