import { NextRequest, NextResponse } from 'next/server';
import { verifyAdminSession } from '@/lib/verification';

export const runtime = 'nodejs';
export const dynamic = 'force-dynamic';

export async function GET(request: NextRequest) {
  try {
    // üöÄ –ö–û–°–¢–´–õ–¨ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø - –ª—é–±–æ–π —Ç–æ–∫–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç
    if (process.env.NODE_ENV === 'development') {
      console.log('üî• DEV MODE: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏');
      
      const fakeSession = {
        id: 'dev-session-' + Date.now(),
        smsVerified: true,
        emailVerified: true,
        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000)
      };

      const fakeAdmin = {
        id: 'dev-admin-id',
        login: 'dev-admin',
        name: 'Dev Admin',
        role: 'SUPER_ADMIN',
        phone: '89241242417',
        email: 'shveddamir@gmail.com',
        telegramId: null
      };

      return NextResponse.json({
        success: true,
        session: fakeSession,
        admin: fakeAdmin
      });
    }

    const { searchParams } = new URL(request.url);
    const token = searchParams.get('token');

    if (!token) {
      return NextResponse.json({ error: '–¢–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏
    const session = await verifyAdminSession(token);

    if (!session) {
      return NextResponse.json({ error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞' }, { status: 401 });
    }

    return NextResponse.json({
      success: true,
      session: {
        id: session.id,
        smsVerified: session.smsVerified,
        emailVerified: session.emailVerified,
        expiresAt: session.expiresAt
      },
      admin: {
        id: session.admin.id,
        login: session.admin.login,
        name: session.admin.name,
        role: session.admin.role,
        phone: session.admin.phone,
        email: session.admin.email,
        telegramId: session.admin.telegramId
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏:', error);
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 });
  }
}

