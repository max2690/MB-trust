import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import bcrypt from 'bcryptjs';
import { 
  createAdminSession, 
  initiateMultiLevelVerification,
  generateVerificationCode,
  createVerificationCode 
} from '@/lib/verification';

export const runtime = 'nodejs';
export const dynamic = 'force-dynamic';

export async function POST(request: NextRequest) {
  try {
    const { login, password } = await request.json();

    // üöÄ –ö–û–°–¢–´–õ–¨ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø - –ª—é–±–æ–π –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –ø—Ä–æ—Ö–æ–¥–∏—Ç
    if (process.env.NODE_ENV === 'development') {
      console.log('üî• DEV MODE: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –≤ API –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏');
      
      // –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—É—é —Å–µ—Å—Å–∏—é
      const fakeSession = {
        id: 'dev-session-' + Date.now(),
        adminId: 'dev-admin-id',
        token: 'dev-token-' + Math.random().toString(36),
        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000) // 24 —á–∞—Å–∞
      };

      const fakeAdmin = {
        id: 'dev-admin-id',
        login: login || 'dev-admin',
        name: 'Dev Admin',
        role: 'SUPER_ADMIN',
        phone: '89241242417',
        email: 'shveddamir@gmail.com',
        isActive: true
      };

      return NextResponse.json({
        success: true,
        session: fakeSession,
        admin: fakeAdmin,
        verification: {
          methods: ['SMS', 'EMAIL'],
          status: { sms: true, email: true }
        }
      });
    }

    if (!login || !password) {
      return NextResponse.json({ error: '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' }, { status: 400 });
    }

    // –ü–æ–∏—Å–∫ –∞–¥–º–∏–Ω–∞ –ø–æ –ª–æ–≥–∏–Ω—É
    const admin = await prisma.admin.findUnique({
      where: { login }
    });

    if (!admin) {
      return NextResponse.json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' }, { status: 401 });
    }

    if (!admin.isActive) {
      return NextResponse.json({ error: '–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' }, { status: 403 });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    const isValidPassword = await bcrypt.compare(password, admin.passwordHash);
    if (!isValidPassword) {
      return NextResponse.json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' }, { status: 401 });
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    const session = await createAdminSession(admin.id);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const verificationResults = await initiateMultiLevelVerification(admin);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
    await prisma.admin.update({
      where: { id: admin.id },
      data: { lastLogin: new Date() }
    });

    return NextResponse.json({
      success: true,
      session: {
        id: session.id,
        token: session.token,
        expiresAt: session.expiresAt
      },
      admin: {
        id: admin.id,
        login: admin.login,
        name: admin.name,
        role: admin.role,
        phone: admin.phone,
        email: admin.email,
        telegramId: admin.telegramId
      },
      verification: {
        methods: verificationResults.map(r => ({
          method: r.method,
          success: r.success
        })),
        required: true
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –∞–¥–º–∏–Ω–∞:', error);
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 });
  }
}

