import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

export const runtime = 'nodejs';
export const dynamic = 'force-dynamic';

// –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function POST(request: NextRequest) {
  try {
    const { 
      userId, 
      isBlocked, 
      reason, 
      blockedBy 
    } = await request.json();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ
    const admin = await prisma.admin.findUnique({
      where: { login: blockedBy }
    });

    if (!admin || !admin.isActive) {
      return NextResponse.json({ 
        error: '–ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω' 
      }, { status: 404 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    const targetUser = await prisma.user.findUnique({
      where: { id: userId }
    });

    if (!targetUser) {
      return NextResponse.json({ 
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      }, { status: 404 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∞
    if (admin.role !== 'SUPER_ADMIN') {
      // –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      // (–≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedUser = await prisma.user.update({
      where: { id: userId },
      data: { 
        isBlocked,
        updatedAt: new Date()
      },
      select: {
        id: true,
        name: true,
        email: true,
        phone: true,
        role: true,
        isBlocked: true,
        updatedAt: true
      }
    });

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${updatedUser.name} (${updatedUser.id}) ${isBlocked ? '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : '—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'} –∞–¥–º–∏–Ω–æ–º ${admin.login}. –ü—Ä–∏—á–∏–Ω–∞: ${reason || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`);

    return NextResponse.json({
      success: true,
      user: updatedUser,
      action: isBlocked ? 'blocked' : 'unblocked',
      reason: reason || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return NextResponse.json({ 
      error: '–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' 
    }, { status: 500 });
  }
}

// –ú–∞—Å—Å–æ–≤–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
export async function PUT(request: NextRequest) {
  try {
    const { 
      userIds, 
      isBlocked, 
      reason, 
      blockedBy 
    } = await request.json();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ
    const admin = await prisma.admin.findUnique({
      where: { login: blockedBy },
      select: { id: true, login: true, role: true, isActive: true }
    });

    if (!admin || !admin.isActive) {
      return NextResponse.json({ 
        error: '–ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω' 
      }, { status: 404 });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const result = await prisma.user.updateMany({
      where: { 
        id: { in: userIds }
        // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–æ–ª—è–º
      },
      data: { 
        isBlocked,
        updatedAt: new Date()
      }
    });

    console.log(`üë• –ú–∞—Å—Å–æ–≤–∞—è ${isBlocked ? '–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞' : '—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞'}: ${result.count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–¥–º–∏–Ω–æ–º ${admin.login}. –ü—Ä–∏—á–∏–Ω–∞: ${reason || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`);

    return NextResponse.json({
      success: true,
      affectedCount: result.count,
      action: isBlocked ? 'blocked' : 'unblocked',
      reason: reason || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:', error);
    return NextResponse.json({ 
      error: '–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏' 
    }, { status: 500 });
  }
}
