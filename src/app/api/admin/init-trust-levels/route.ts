import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

// POST /api/admin/init-trust-levels - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Ä–æ–≤–Ω–µ–π –¥–æ–≤–µ—Ä–∏—è
export async function POST(request: NextRequest) {
  try {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Ä–æ–≤–Ω–µ–π –¥–æ–≤–µ—Ä–∏—è...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —É—Ä–æ–≤–Ω–∏
    const existingLevels = await prisma.trustLevel.findMany();
    if (existingLevels.length > 0) {
      return NextResponse.json({
        success: true,
        message: '–£—Ä–æ–≤–Ω–∏ –¥–æ–≤–µ—Ä–∏—è —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã',
        levels: existingLevels
      });
    }

    // –°–æ–∑–¥–∞–µ–º —É—Ä–æ–≤–Ω–∏ –¥–æ–≤–µ—Ä–∏—è
    const trustLevels = [
      {
        name: 'NOVICE',
        displayName: '–ù–æ–≤–∏—á–æ–∫',
        minPricePerStory: 50,
        commissionRate: 0.4, // 40% –∫–æ–º–∏—Å—Å–∏—è
        minExecutions: 0,
        minRating: 0,
        minDaysActive: 0,
        adminNotes: '–ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
      },
      {
        name: 'VERIFIED',
        displayName: '–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π',
        minPricePerStory: 80,
        commissionRate: 0.5, // 50% –∫–æ–º–∏—Å—Å–∏—è
        minExecutions: 10,
        minRating: 4.0,
        minDaysActive: 30,
        adminNotes: '–£—Ä–æ–≤–µ–Ω—å –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
      },
      {
        name: 'REFERRAL',
        displayName: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π',
        minPricePerStory: 100,
        commissionRate: 0.6, // 60% –∫–æ–º–∏—Å—Å–∏—è
        minExecutions: 50,
        minRating: 4.5,
        minDaysActive: 100,
        adminNotes: '–£—Ä–æ–≤–µ–Ω—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏'
      },
      {
        name: 'TOP',
        displayName: '–¢–æ–ø',
        minPricePerStory: 150,
        commissionRate: 0.8, // 80% –∫–æ–º–∏—Å—Å–∏—è
        minExecutions: 100,
        minRating: 4.8,
        minDaysActive: 200,
        adminNotes: '–í—ã—Å—à–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —Ç–æ–ø–æ–≤—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π'
      }
    ];

    const createdLevels = await Promise.all(
      trustLevels.map(level => 
        prisma.trustLevel.create({ data: level })
      )
    );

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${createdLevels.length} —É—Ä–æ–≤–Ω–µ–π –¥–æ–≤–µ—Ä–∏—è`);

    return NextResponse.json({
      success: true,
      message: `–°–æ–∑–¥–∞–Ω–æ ${createdLevels.length} —É—Ä–æ–≤–Ω–µ–π –¥–æ–≤–µ—Ä–∏—è`,
      levels: createdLevels
    });
  } catch (error) {
    console.error('Error initializing trust levels:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É—Ä–æ–≤–Ω–µ–π –¥–æ–≤–µ—Ä–∏—è' },
      { status: 500 }
    );
  }
}

// GET /api/admin/init-trust-levels - –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
export async function GET(request: NextRequest) {
  try {
    const levels = await prisma.trustLevel.findMany({
      orderBy: { minExecutions: 'asc' }
    });

    return NextResponse.json({
      success: true,
      initialized: levels.length > 0,
      levelsCount: levels.length,
      levels
    });
  } catch (error) {
    console.error('Error checking trust levels:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Ä–æ–≤–Ω–µ–π –¥–æ–≤–µ—Ä–∏—è' },
      { status: 500 }
    );
  }
}
