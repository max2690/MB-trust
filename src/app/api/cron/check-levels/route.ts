import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

// POST /api/cron/check-levels - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
export async function POST(request: NextRequest) {
  try {
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —É—Ä–æ–≤–Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    const executors = await prisma.user.findMany({
      where: {
        role: 'EXECUTOR',
        isActivated: true
      },
      include: {
        trustLevel: true,
        executions: {
          where: {
            status: 'COMPLETED'
          }
        }
      }
    });

    let upgradedCount = 0;
    const upgrades = [];

    for (const executor of executors) {
      const currentLevel = executor.trustLevel;
      const totalExecutions = executor.executions.length;
      const averageRating = executor.averageRating || 0;
      const daysActive = executor.daysActive || 0;

      // –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
      const nextLevel = await prisma.trustLevel.findFirst({
        where: {
          minExecutions: { lte: totalExecutions },
          minRating: { lte: averageRating },
          minDaysActive: { lte: daysActive },
          isActive: true
        },
        orderBy: { minExecutions: 'desc' }
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
      if (nextLevel && (!currentLevel || nextLevel.minExecutions > currentLevel.minExecutions)) {
        await prisma.user.update({
          where: { id: executor.id },
          data: {
            trustLevelId: nextLevel.id,
            levelUpEligible: true
          }
        });

        upgradedCount++;
        upgrades.push({
          userId: executor.id,
          userName: executor.name,
          fromLevel: currentLevel?.displayName || '–ù–µ—Ç —É—Ä–æ–≤–Ω—è',
          toLevel: nextLevel.displayName
        });

        console.log(`‚úÖ ${executor.name} –ø–æ–≤—ã—à–µ–Ω —Å ${currentLevel?.displayName || '–ù–µ—Ç —É—Ä–æ–≤–Ω—è'} –¥–æ ${nextLevel.displayName}`);
      }
    }

    console.log(`üéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–≤—ã—à–µ–Ω–æ —É—Ä–æ–≤–Ω–µ–π: ${upgradedCount}`);

    return NextResponse.json({
      success: true,
      message: `–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–≤—ã—à–µ–Ω–æ —É—Ä–æ–≤–Ω–µ–π: ${upgradedCount}`,
      upgradedCount,
      upgrades
    });
  } catch (error) {
    console.error('Error checking user levels:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Ä–æ–≤–Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' },
      { status: 500 }
    );
  }
}

// GET /api/cron/check-levels - –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—Ä–æ–≤–Ω–µ–π
export async function GET(request: NextRequest) {
  try {
    const stats = await prisma.user.groupBy({
      by: ['trustLevelId'],
      _count: {
        id: true
      },
      where: {
        role: 'EXECUTOR',
        isActivated: true
      }
    });

    const levelStats = await Promise.all(
      stats.map(async (stat) => {
        const level = await prisma.trustLevel.findUnique({
          where: { id: stat.trustLevelId || '' }
        });

        return {
          level: level?.displayName || '–ë–µ–∑ —É—Ä–æ–≤–Ω—è',
          count: stat._count.id
        };
      })
    );

    return NextResponse.json({
      success: true,
      stats: levelStats
    });
  } catch (error) {
    console.error('Error fetching level stats:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—Ä–æ–≤–Ω–µ–π' },
      { status: 500 }
    );
  }
}
