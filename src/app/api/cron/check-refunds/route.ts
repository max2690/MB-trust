import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

export const runtime = 'nodejs';
export const dynamic = 'force-dynamic';

export async function GET() {
  try {
    console.log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞...');

    const now = new Date();
    
    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏ –ø—Ä–æ—à–ª–æ 72 —á–∞—Å–∞ –ø–æ—Å–ª–µ –¥–µ–¥–ª–∞–π–Ω–∞
    const expiredOrders = await prisma.order.findMany({
      where: {
        status: { in: ['PENDING', 'IN_PROGRESS'] },
        refundOnFailure: true,
        refundDeadline: { lte: now },
        refunds: { none: { status: { not: 'CANCELLED' } } } // –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–∑–≤—Ä–∞—Ç–æ–≤
      },
      include: {
        executions: {
          where: { status: 'COMPLETED' }
        }
      }
    });

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${expiredOrders.length} –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞`);

    const processedRefunds = [];

    for (const order of expiredOrders) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω
      if (order.executions.length === 0) {
        try {
          // –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç
          const refundAmount = (order as { totalReward?: number }).totalReward ?? order.reward ?? 0;

          const refund = await prisma.refund.create({
            data: {
              orderId: order.id,
              customerId: order.customerId,
              amount: refundAmount,
              reason: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç: –∑–∞–∫–∞–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –≤ —Å—Ä–æ–∫',
              status: 'PENDING'
            }
          });

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
          await prisma.order.update({
            where: { id: order.id },
            data: { status: 'CANCELLED' }
          });

          processedRefunds.push(refund);
          console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –≤–æ–∑–≤—Ä–∞—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ ${order.id}: ${refundAmount}‚ÇΩ`);

        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${order.id}:`, error);
        }
      }
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –≤–æ–∑–≤—Ä–∞—Ç—ã
    const pendingRefunds = await prisma.refund.findMany({
      where: { status: 'PENDING' },
      include: { customer: true, order: true }
    });

    console.log(`üí∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ ${pendingRefunds.length} –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–æ–∑–≤—Ä–∞—Ç–æ–≤`);

    for (const refund of pendingRefunds) {
      try {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏ –Ω–∞ —Å—á–µ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞
        await prisma.user.update({
          where: { id: refund.customerId },
          data: {
            balance: {
              increment: refund.amount
            }
          }
        });

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
        await prisma.payment.create({
          data: {
            userId: refund.customerId,
            amount: refund.amount,
            type: 'DEPOSIT',
            status: 'COMPLETED',
            description: `–í–æ–∑–≤—Ä–∞—Ç –∑–∞ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑: ${refund.order.title}`
          }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ–∑–≤—Ä–∞—Ç–∞
        await prisma.refund.update({
          where: { id: refund.id },
          data: {
            status: 'COMPLETED',
            processedAt: now
          }
        });

        console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω –≤–æ–∑–≤—Ä–∞—Ç ${refund.id}: ${refund.amount}‚ÇΩ –¥–ª—è ${refund.customer.name}`);

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ ${refund.id}:`, error);
      }
    }

    return NextResponse.json({
      message: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
      processedRefunds: processedRefunds.length,
      completedRefunds: pendingRefunds.length,
      success: true
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤:', error);
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤' }, { status: 500 });
  }
}

