'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import Link from 'next/link';
import { Bot, CreditCard, Wallet } from 'lucide-react';

interface VerificationStatus {
  selfEmployed: {
    verified: boolean;
    innNumber?: string;
    status: string;
    verifiedAt?: string;
  };
  telegramWallet: {
    verified: boolean;
    walletId?: string;
    verifiedAt?: string;
  };
  preferredPayoutMethod: string;
}

export default function VerificationPage() {
  const [userId, setUserId] = useState('');
  const [innNumber, setInnNumber] = useState('');
  const [telegramUserId, setTelegramUserId] = useState('');
  const [verificationStatus, setVerificationStatus] = useState<VerificationStatus | null>(null);
  const [loading, setLoading] = useState(false);

  const checkVerificationStatus = async () => {
    if (!userId) {
      alert('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }

    setLoading(true);
    try {
      const response = await fetch(`/api/verification/status?userId=${userId}`);
      const data = await response.json();
      
      if (data.success) {
        setVerificationStatus(data.verification);
      } else {
        alert(data.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');
      }
    } catch (error) {
      console.error('Error fetching verification status:', error);
      alert('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');
    } finally {
      setLoading(false);
    }
  };

  const verifySelfEmployed = async () => {
    if (!userId || !innNumber) {
      alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
      return;
    }

    setLoading(true);
    try {
      const response = await fetch('/api/verification/nalog', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ innNumber, userId }),
      });

      const data = await response.json();
      
      if (data.success) {
        alert('–°—Ç–∞—Ç—É—Å —Å–∞–º–æ–∑–∞–Ω—è—Ç–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!');
        checkVerificationStatus(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      } else {
        alert(data.message || '–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');
      }
    } catch (error) {
      console.error('Error verifying self-employed:', error);
      alert('–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∞–º–æ–∑–∞–Ω—è—Ç–æ–≥–æ');
    } finally {
      setLoading(false);
    }
  };

  const verifyTelegramWallet = async () => {
    if (!userId || !telegramUserId) {
      alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
      return;
    }

    setLoading(true);
    try {
      const response = await fetch('/api/verification/telegram-wallet', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ telegramUserId, userId }),
      });

      const data = await response.json();
      
      if (data.success) {
        alert('Telegram Wallet –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!');
        checkVerificationStatus(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      } else {
        alert(data.message || '–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');
      }
    } catch (error) {
      console.error('Error verifying Telegram Wallet:', error);
      alert('–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ Telegram Wallet');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="container mx-auto p-6">
      <div className="mb-6">
        <h1 className="text-3xl font-bold">üîç –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –≤—ã–ø–ª–∞—Ç</h1>
        <p className="text-gray-600 mt-2">
          –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ —Å—Ç–∞—Ç—É—Å —Å–∞–º–æ–∑–∞–Ω—è—Ç–æ–≥–æ –∏ Telegram Wallet –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç
        </p>
      </div>

      {/* Telegram –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ */}
      <Card className="mb-6 border-blue-200 bg-blue-50">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-blue-700">
            <Bot className="h-5 w-5" />
            ü§ñ Telegram –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–ù–û–í–û–ï!)
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <p className="text-blue-600 font-medium">
              –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞—à–∏—Ö —Å—Ç–æ—Ä–∏—Å —á–µ—Ä–µ–∑ Telegram Bot
            </p>
            <div className="grid md:grid-cols-3 gap-4 text-sm">
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                <span>100% –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                <span>–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-purple-500 rounded-full"></div>
                <span>–ù–∏–∫–∞–∫–∏—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤</span>
              </div>
            </div>
            <Link href="/verification/telegram">
              <Button className="w-full bg-blue-600 hover:bg-blue-700">
                <Bot className="h-4 w-4 mr-2" />
                –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Telegram –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
              </Button>
            </Link>
          </div>
        </CardContent>
      </Card>

      {/* –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
      <Card className="mb-6">
        <CardHeader>
          <CardTitle>üë§ –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex space-x-4">
            <div className="flex-1">
              <Label>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</Label>
              <Input
                value={userId}
                onChange={(e) => setUserId(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                className="mt-1"
              />
            </div>
            <div className="flex items-end">
              <Button 
                onClick={checkVerificationStatus}
                disabled={!userId || loading}
              >
                {loading ? '–ü—Ä–æ–≤–µ—Ä—è–µ–º...' : 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å'}
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* –°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ */}
      {verificationStatus && (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
          {/* –°—Ç–∞—Ç—É—Å —Å–∞–º–æ–∑–∞–Ω—è—Ç–æ–≥–æ */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                <span>üè¶ –ë–∞–Ω–∫ –°–ü–ë (—Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–µ)</span>
                <div className={`w-3 h-3 rounded-full ${
                  verificationStatus.selfEmployed.verified ? 'bg-green-500' : 'bg-red-500'
                }`} />
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                <div className="text-sm">
                  <span className="font-semibold">–°—Ç–∞—Ç—É—Å:</span> 
                  <span className={`ml-2 ${
                    verificationStatus.selfEmployed.verified ? 'text-green-600' : 'text-red-600'
                  }`}>
                    {verificationStatus.selfEmployed.verified ? '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω' : '‚ùå –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'}
                  </span>
                </div>
                
                {verificationStatus.selfEmployed.innNumber && (
                  <div className="text-sm">
                    <span className="font-semibold">–ò–ù–ù:</span> 
                    <span className="ml-2">{verificationStatus.selfEmployed.innNumber}</span>
                  </div>
                )}
                
                {verificationStatus.selfEmployed.verifiedAt && (
                  <div className="text-sm">
                    <span className="font-semibold">–î–∞—Ç–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:</span> 
                    <span className="ml-2">{new Date(verificationStatus.selfEmployed.verifiedAt).toLocaleDateString()}</span>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

          {/* –°—Ç–∞—Ç—É—Å Telegram Wallet */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                <span>ü§ñ Telegram Wallet</span>
                <div className={`w-3 h-3 rounded-full ${
                  verificationStatus.telegramWallet.verified ? 'bg-green-500' : 'bg-red-500'
                }`} />
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                <div className="text-sm">
                  <span className="font-semibold">–°—Ç–∞—Ç—É—Å:</span> 
                  <span className={`ml-2 ${
                    verificationStatus.telegramWallet.verified ? 'text-green-600' : 'text-red-600'
                  }`}>
                    {verificationStatus.telegramWallet.verified ? '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω' : '‚ùå –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'}
                  </span>
                </div>
                
                {verificationStatus.telegramWallet.walletId && (
                  <div className="text-sm">
                    <span className="font-semibold">Wallet ID:</span> 
                    <span className="ml-2">{verificationStatus.telegramWallet.walletId}</span>
                  </div>
                )}
                
                {verificationStatus.telegramWallet.verifiedAt && (
                  <div className="text-sm">
                    <span className="font-semibold">–î–∞—Ç–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:</span> 
                    <span className="ml-2">{new Date(verificationStatus.telegramWallet.verifiedAt).toLocaleDateString()}</span>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–∞–º–æ–∑–∞–Ω—è—Ç–æ–≥–æ */}
      <Card className="mb-6">
        <CardHeader>
          <CardTitle>üè¶ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–∞–º–æ–∑–∞–Ω—è—Ç–æ–≥–æ</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div>
              <Label>–ò–ù–ù —Å–∞–º–æ–∑–∞–Ω—è—Ç–æ–≥–æ</Label>
              <Input
                value={innNumber}
                onChange={(e) => setInnNumber(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ 12-–∑–Ω–∞—á–Ω—ã–π –ò–ù–ù"
                className="mt-1"
                maxLength={12}
              />
              <p className="text-sm text-gray-600 mt-1">
                –ò–ù–ù –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 12-–∑–Ω–∞—á–Ω—ã–º —á–∏—Å–ª–æ–º
              </p>
            </div>
            
            <Button 
              onClick={verifySelfEmployed}
              disabled={!userId || !innNumber || loading}
              className="w-full"
            >
              {loading ? '–ü—Ä–æ–≤–µ—Ä—è–µ–º...' : 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∞–º–æ–∑–∞–Ω—è—Ç–æ–≥–æ'}
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è Telegram Wallet */}
      <Card>
        <CardHeader>
          <CardTitle>ü§ñ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è Telegram Wallet</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div>
              <Label>Telegram User ID</Label>
              <Input
                value={telegramUserId}
                onChange={(e) => setTelegramUserId(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ Telegram User ID"
                className="mt-1"
              />
              <p className="text-sm text-gray-600 mt-1">
                –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è User ID –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @userinfobot –≤ Telegram
              </p>
            </div>
            
            <Button 
              onClick={verifyTelegramWallet}
              disabled={!userId || !telegramUserId || loading}
              className="w-full"
            >
              {loading ? '–ü—Ä–æ–≤–µ—Ä—è–µ–º...' : 'üîç –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å Telegram Wallet'}
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
