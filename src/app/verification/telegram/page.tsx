'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { CheckCircle, XCircle, Clock, Bot, Smartphone } from 'lucide-react';

interface TelegramVerification {
  telegramUsername: string;
  isVerified: boolean;
  storiesMonitored: number;
  storiesApproved: number;
  lastStoryCheck: string | null;
}

export default function TelegramVerificationPage() {
  const [telegramUsername, setTelegramUsername] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [verification, setVerification] = useState<TelegramVerification | null>(null);
  const [monitoring, setMonitoring] = useState(false);
  const [message, setMessage] = useState('');
  const [error, setError] = useState('');

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  useEffect(() => {
    fetchMonitoringStatus();
  }, []);

  const fetchMonitoringStatus = async () => {
    try {
      const response = await fetch('/api/verification/telegram-monitor?userId=test-user-id');
      const data = await response.json();
      
      if (data.success) {
        setMonitoring(data.monitoring);
        if (data.verification) {
          setVerification(data.verification);
        }
      }
    } catch (error) {
      console.error('Error fetching monitoring status:', error);
    }
  };

  const startMonitoring = async () => {
    if (!telegramUsername.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ Telegram username');
      return;
    }

    setIsLoading(true);
    setError('');
    setMessage('');

    try {
      const response = await fetch('/api/verification/telegram-monitor', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId: 'test-user-id', // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          telegramUsername: telegramUsername.trim()
        }),
      });

      const data = await response.json();

      if (data.success) {
        setMessage('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞ –∑–∞–ø—É—â–µ–Ω! ü§ñ');
        setMonitoring(true);
        setVerification(data.verification);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        const interval = setInterval(fetchMonitoringStatus, 5000);
        setTimeout(() => clearInterval(interval), 60000); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É
      } else {
        setError(data.error || '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞');
      }
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
    } finally {
      setIsLoading(false);
    }
  };

  const stopMonitoring = async () => {
    setIsLoading(true);
    setError('');

    try {
      const response = await fetch('/api/verification/telegram-monitor', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId: 'test-user-id'
        }),
      });

      const data = await response.json();

      if (data.success) {
        setMessage('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        setMonitoring(false);
        setVerification(null);
      } else {
        setError(data.error || '–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞');
      }
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="container mx-auto p-6 max-w-4xl">
      <div className="mb-8">
        <h1 className="text-3xl font-bold mb-2">ü§ñ Telegram –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</h1>
        <p className="text-gray-600">
          –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞—à–∏—Ö —Å—Ç–æ—Ä–∏—Å —á–µ—Ä–µ–∑ Telegram Bot
        </p>
      </div>

      <div className="grid gap-6">
        {/* –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ */}
        {verification && (
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Bot className="h-5 w-5" />
                –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div className="text-center">
                  <div className="text-2xl font-bold text-blue-600">
                    {verification.telegramUsername}
                  </div>
                  <div className="text-sm text-gray-500">Username</div>
                </div>
                
                <div className="text-center">
                  <div className="text-2xl font-bold text-green-600">
                    {verification.storiesMonitored}
                  </div>
                  <div className="text-sm text-gray-500">–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ</div>
                </div>
                
                <div className="text-center">
                  <div className="text-2xl font-bold text-purple-600">
                    {verification.storiesApproved}
                  </div>
                  <div className="text-sm text-gray-500">–û–¥–æ–±—Ä–µ–Ω–æ</div>
                </div>
                
                <div className="text-center">
                  <Badge variant={verification.isVerified ? "default" : "secondary"}>
                    {verification.isVerified ? (
                      <><CheckCircle className="h-4 w-4 mr-1" /> –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω</>
                    ) : (
                      <><Clock className="h-4 w-4 mr-1" /> –í –ø—Ä–æ—Ü–µ—Å—Å–µ</>
                    )}
                  </Badge>
                </div>
              </div>
            </CardContent>
          </Card>
        )}

        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Smartphone className="h-5 w-5" />
              {monitoring ? '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º' : '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞'}
            </CardTitle>
          </CardHeader>
          <CardContent>
            {!monitoring ? (
              <div className="space-y-4">
                <div>
                  <Label htmlFor="telegram-username">Telegram Username</Label>
                  <Input
                    id="telegram-username"
                    placeholder="@username"
                    value={telegramUsername}
                    onChange={(e) => setTelegramUsername(e.target.value)}
                    className="mt-1"
                  />
                </div>

                <Alert>
                  <Bot className="h-4 w-4" />
                  <AlertDescription>
                    <strong>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</strong>
                    <ol className="list-decimal list-inside mt-2 space-y-1 text-sm">
                      <li>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram username</li>
                      <li>–ë–æ—Ç –Ω–∞—á–Ω–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –≤–∞—à–∏ —Å—Ç–æ—Ä–∏—Å</li>
                      <li>–ü—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Å—Ç–æ—Ä–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è</li>
                      <li>–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö</li>
                    </ol>
                  </AlertDescription>
                </Alert>

                <Button 
                  onClick={startMonitoring} 
                  disabled={isLoading}
                  className="w-full"
                >
                  {isLoading ? '–ó–∞–ø—É—Å–∫...' : 'üöÄ –ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥'}
                </Button>
              </div>
            ) : (
              <div className="space-y-4">
                <Alert>
                  <CheckCircle className="h-4 w-4" />
                  <AlertDescription>
                    –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è {verification?.telegramUsername}. 
                    –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞—à–∏ –Ω–æ–≤—ã–µ —Å—Ç–æ—Ä–∏—Å.
                  </AlertDescription>
                </Alert>

                <Button 
                  onClick={stopMonitoring} 
                  disabled={isLoading}
                  variant="destructive"
                  className="w-full"
                >
                  {isLoading ? '–û—Å—Ç–∞–Ω–æ–≤–∫–∞...' : '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥'}
                </Button>
              </div>
            )}
          </CardContent>
        </Card>

        {/* –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ */}
        <Card>
          <CardHeader>
            <CardTitle>‚ú® –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Telegram –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <h4 className="font-semibold text-green-600">‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è</h4>
                <ul className="text-sm text-gray-600 space-y-1">
                  <li>‚Ä¢ 100% –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞</li>
                  <li>‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</li>
                  <li>‚Ä¢ –ù–∏–∫–∞–∫–∏—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤</li>
                </ul>
              </div>
              
              <div className="space-y-2">
                <h4 className="font-semibold text-blue-600">üéØ –¢–æ—á–Ω–æ—Å—Ç—å</h4>
                <ul className="text-sm text-gray-600 space-y-1">
                  <li>‚Ä¢ –ê–Ω–∞–ª–∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–∏—Å</li>
                  <li>‚Ä¢ –ù–µ—Ç –ø–æ—Ç–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–∞</li>
                  <li>‚Ä¢ –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è</li>
                </ul>
              </div>
              
              <div className="space-y-2">
                <h4 className="font-semibold text-purple-600">üì± –£–¥–æ–±—Å—Ç–≤–æ</h4>
                <ul className="text-sm text-gray-600 space-y-1">
                  <li>‚Ä¢ –í—Å–µ —á–µ—Ä–µ–∑ Telegram</li>
                  <li>‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</li>
                  <li>‚Ä¢ –ü—Ä–æ—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</li>
                </ul>
              </div>
              
              <div className="space-y-2">
                <h4 className="font-semibold text-orange-600">ü§ñ AI –ê–Ω–∞–ª–∏–∑</h4>
                <ul className="text-sm text-gray-600 space-y-1">
                  <li>‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ QR-–∫–æ–¥–æ–≤</li>
                  <li>‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</li>
                  <li>‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–¥–∞–Ω–∏—é</li>
                </ul>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
      {message && (
        <Alert className="mt-4">
          <CheckCircle className="h-4 w-4" />
          <AlertDescription>{message}</AlertDescription>
        </Alert>
      )}

      {error && (
        <Alert variant="destructive" className="mt-4">
          <XCircle className="h-4 w-4" />
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}
    </div>
  );
}
