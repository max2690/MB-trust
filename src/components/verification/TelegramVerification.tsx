'use client'

import { useState, useEffect } from 'react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Send, CheckCircle2, Loader2 } from 'lucide-react'

interface TelegramVerificationProps {
  userId: string
  onVerified?: () => void
}

export function TelegramVerification({ userId, onVerified }: TelegramVerificationProps) {
  const [status, setStatus] = useState<'idle' | 'loading' | 'pending' | 'completed' | 'error'>('idle')
  const [code, setCode] = useState<string | null>(null)
  const [deepLink, setDeepLink] = useState<string | null>(null)
  const [error, setError] = useState<string | null>(null)

  const startVerification = async () => {
    setStatus('loading')
    setError(null)

    try {
      const res = await fetch('/api/verification/telegram/start', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId })
      })

      const data = await res.json()

      if (!res.ok || !data.success) {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏')
      }

      setCode(data.code)
      setDeepLink(data.deepLink)
      setStatus('pending')
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏')
      setStatus('error')
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
  useEffect(() => {
    if (status !== 'pending') return

    const interval = setInterval(async () => {
      try {
        const res = await fetch(`/api/users?userId=${userId}`)
        const data = await res.json()

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–∞
        const user = data.user || data.users?.[0] || (Array.isArray(data.users) && data.users.length > 0 ? data.users[0] : null)
        
        if (data.success && user?.isVerified) {
          setStatus('completed')
          onVerified?.()
          clearInterval(interval)
        }
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', err)
      }
    }, 2000) // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã

    return () => clearInterval(interval)
  }, [status, userId, onVerified])

  if (status === 'completed') {
    return (
      <Card className="border-mb-turquoise/50 bg-mb-turquoise/5">
        <CardHeader>
          <CardTitle className="text-center text-mb-turquoise">‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</CardTitle>
          <CardDescription className="text-center">
            –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Telegram
          </CardDescription>
        </CardHeader>
      </Card>
    )
  }

  return (
    <Card className="border-mb-turquoise/50 bg-mb-turquoise/5">
      <CardHeader>
        <CardTitle className="text-center">–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram</CardTitle>
        <CardDescription className="text-center">
          –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ—é –ª–∏—á–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        {status === 'idle' || status === 'error' ? (
          <>
            {error && (
              <div className="bg-mb-red/10 border border-mb-red/50 rounded-lg p-3 text-sm text-mb-red">
                {error}
              </div>
            )}
            <div className="bg-mb-black/50 rounded-lg p-4 text-sm text-mb-gray space-y-2">
              <p className="font-semibold text-mb-white">–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</p>
              <ol className="list-decimal list-inside space-y-1">
                <li>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏</li>
                <li>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –≤ Telegram –±–æ—Ç–∞</li>
                <li>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 6 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–æ—Ç–µ</li>
                <li>–í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç ‚Äî —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</li>
              </ol>
            </div>
            <Button onClick={startVerification} className="w-full">
              <>
                <Send className="mr-2 h-4 w-4" />
                –ù–∞—á–∞—Ç—å –ø—Ä–∏–≤—è–∑–∫—É —á–µ—Ä–µ–∑ Telegram
              </>
            </Button>
          </>
        ) : status === 'pending' && code && deepLink ? (
          <>
            <div className="bg-mb-black/50 rounded-lg p-4 text-center space-y-3">
              <p className="text-sm text-mb-gray">–í–∞—à –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:</p>
              <p className="text-2xl font-mono font-bold text-mb-turquoise">{code.toUpperCase()}</p>
              <p className="text-xs text-mb-gray">–≠—Ç–æ—Ç –∫–æ–¥ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –±–æ—Ç–æ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</p>
            </div>

            <a
              href={deepLink}
              target="_blank"
              rel="noopener noreferrer"
              className="block"
            >
              <Button className="w-full" variant="default">
                <Send className="mr-2 h-4 w-4" />
                –û—Ç–∫—Ä—ã—Ç—å Telegram –±–æ—Ç–∞
              </Button>
            </a>

            <div className="bg-mb-gold/10 border border-mb-gold/30 rounded-lg p-3">
              <p className="text-xs text-mb-gray">
                üí° –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –±–æ—Ç–µ, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É. 
                –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
              </p>
            </div>

            <div className="flex items-center gap-2 text-sm text-mb-gray">
              <Loader2 className="h-4 w-4 animate-spin" />
              <span>–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...</span>
            </div>
          </>
        ) : null}
      </CardContent>
    </Card>
  )
}

