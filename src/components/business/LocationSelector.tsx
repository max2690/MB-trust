'use client';

import { useState, useEffect } from 'react';
import { Card } from '../ui/card';
import { Input } from '../ui/input';

interface Location {
  country: string | null;
  region: string | null;
  city: string | null;
}

interface LocationSelectorProps {
  onLocationChange: (location: Location) => void;
  initialLocation?: Location;
}

export function LocationSelector({ onLocationChange, initialLocation }: LocationSelectorProps) {
  const [scope, setScope] = useState<'country' | 'region' | 'city'>('country');
  const [selectedCountry, setSelectedCountry] = useState<string | null>(null);
  const [selectedRegion, setSelectedRegion] = useState<string | null>(null);
  const [selectedCity, setSelectedCity] = useState<string | null>(null);
  
  const [countryInput, setCountryInput] = useState('');
  const [regionInput, setRegionInput] = useState('');
  const [cityInput, setCityInput] = useState('');

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  useEffect(() => {
    if (initialLocation) {
      setSelectedCountry(initialLocation.country);
      setSelectedRegion(initialLocation.region);
      setSelectedCity(initialLocation.city);
      
      setCountryInput(initialLocation.country || '–†–æ—Å—Å–∏—è');
      setRegionInput(initialLocation.region || '');
      setCityInput(initialLocation.city || '');
      
      if (initialLocation.city) setScope('city');
      else if (initialLocation.region) setScope('region');
      else setScope('country');
    } else {
      setCountryInput('–†–æ—Å—Å–∏—è');
    }
  }, [initialLocation]);

  // –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã –†–æ—Å—Å–∏–∏
  const regions = [
    '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    '–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π',
    '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∏–π –∫—Ä–∞–π',
    '–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π –∫—Ä–∞–π',
    '–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    '–†–æ—Å—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω',
    '–°–∞–º–∞—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    '–í–æ–ª–≥–æ–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    '–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    '–ß–µ–ª—è–±–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    '–ò—Ä–∫—É—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    '–•–∞–±–∞—Ä–æ–≤—Å–∫–∏–π –∫—Ä–∞–π',
    '–•–∞–Ω—Ç—ã-–ú–∞–Ω—Å–∏–π—Å–∫–∏–π –ê–û',
    '–ê–ª—Ç–∞–π—Å–∫–∏–π –∫—Ä–∞–π',
    '–ö–µ–º–µ—Ä–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    '–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    '–ê—Å—Ç—Ä–∞—Ö–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    '–ë–µ–ª–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    '–ë—Ä—è–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    '–í–ª–∞–¥–∏–º–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    '–í–æ–ª–æ–≥–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    '–í–æ—Ä–æ–Ω–µ–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    '–ö–∞–ª—É–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    '–ö–æ—Å—Ç—Ä–æ–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    '–ö—É—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    '–õ–∏–ø–µ—Ü–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    '–ú–∞–≥–∞–¥–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    '–ú—É—Ä–º–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    '–ù–æ–≤–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    '–û—Ä–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    '–ü–µ–Ω–∑–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    '–ü—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    '–†—è–∑–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    '–°–∞—Ä–∞—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    '–°–º–æ–ª–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    '–¢–∞–º–±–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    '–¢–≤–µ—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    '–¢—É–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    '–¢—é–º–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    '–£–ª—å—è–Ω–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    '–ß–µ–ª—è–±–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    '–Ø—Ä–æ—Å–ª–∞–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å'
  ];

  const handleScopeChange = (newScope: 'country' | 'region' | 'city') => {
    setScope(newScope);
    
    if (newScope === 'country') {
      setSelectedRegion(null);
      setSelectedCity(null);
      setRegionInput('');
      setCityInput('');
    } else if (newScope === 'region') {
      setSelectedCity(null);
      setCityInput('');
    }
    
    updateLocation(selectedCountry, selectedRegion, selectedCity, newScope);
  };

  const updateLocation = (country: string | null, region: string | null, city: string | null, currentScope: 'country' | 'region' | 'city') => {
    let finalCountry = country || '–†–æ—Å—Å–∏—è';
    let finalRegion = null;
    let finalCity = null;

    if (currentScope === 'region' && region) {
      finalRegion = region;
    } else if (currentScope === 'city' && city) {
      finalCity = city;
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω –¥–ª—è –≥–æ—Ä–æ–¥–∞
      const cityRegion = getRegionByCity(city);
      finalRegion = cityRegion;
    }

    onLocationChange({
      country: finalCountry,
      region: finalRegion,
      city: finalCity
    });
  };

  const getRegionByCity = (city: string): string | null => {
    // –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤ —Å —Ä–µ–≥–∏–æ–Ω–∞–º–∏
    const cityRegionMap: { [key: string]: string } = {
      '–ú–æ—Å–∫–≤–∞': '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
      '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': '–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
      '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä': '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π',
      '–í–æ—Ä–æ–Ω–µ–∂': '–í–æ—Ä–æ–Ω–µ–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
      '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
      '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': '–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
      '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥': '–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
      '–ö–∞–∑–∞–Ω—å': '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω',
      '–ß–µ–ª—è–±–∏–Ω—Å–∫': '–ß–µ–ª—è–±–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
      '–°–∞–º–∞—Ä–∞': '–°–∞–º–∞—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
      '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É': '–†–æ—Å—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
      '–£—Ñ–∞': '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ë–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω',
      '–û–º—Å–∫': '–û–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
      '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫': '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∏–π –∫—Ä–∞–π',
      '–í–æ—Ä–æ–Ω–µ–∂': '–í–æ—Ä–æ–Ω–µ–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
      '–ü–µ—Ä–º—å': '–ü–µ—Ä–º—Å–∫–∏–π –∫—Ä–∞–π',
      '–í–æ–ª–≥–æ–≥—Ä–∞–¥': '–í–æ–ª–≥–æ–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
      '–•–∞–±–∞—Ä–æ–≤—Å–∫': '–•–∞–±–∞—Ä–æ–≤—Å–∫–∏–π –∫—Ä–∞–π',
      '–°–∞—Ä–∞—Ç–æ–≤': '–°–∞—Ä–∞—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
      '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥': '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å'
    };
    
    return cityRegionMap[city] || null;
  };

  const handleCountrySelect = () => {
    setSelectedCountry('–†–æ—Å—Å–∏—è');
    updateLocation('–†–æ—Å—Å–∏—è', null, null, 'country');
  };

  const handleRegionSelect = (region: string) => {
    setSelectedRegion(region);
    setRegionInput(region);
    updateLocation(selectedCountry, region, null, 'region');
  };

  const handleCityInputChange = (value: string) => {
    setCityInput(value);
    setSelectedCity(value);
    updateLocation(selectedCountry, null, value, 'city');
  };

  return (
    <div className="space-y-4">
      <div>
        <label className="block text-sm font-medium mb-2 text-white">
          –í—ã–±–µ—Ä–∏—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –∑–∞–¥–∞–Ω–∏—è
        </label>
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –æ–±–ª–∞—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è */}
      <div className="flex space-x-2">
        <button
          type="button"
          onClick={() => handleScopeChange('country')}
          className={`px-4 py-2 rounded-lg border transition-all ${
            scope === 'country'
              ? 'border-mb-turquoise bg-mb-turquoise/10 text-mb-turquoise'
              : 'border-mb-gray/20 bg-mb-black/50 text-mb-gray hover:border-mb-turquoise/50'
          }`}
        >
          üåç –í—Å—è —Å—Ç—Ä–∞–Ω–∞
        </button>
        <button
          type="button"
          onClick={() => handleScopeChange('region')}
          className={`px-4 py-2 rounded-lg border transition-all ${
            scope === 'region'
              ? 'border-mb-turquoise bg-mb-turquoise/10 text-mb-turquoise'
              : 'border-mb-gray/20 bg-mb-black/50 text-mb-gray hover:border-mb-turquoise/50'
          }`}
        >
          üó∫Ô∏è –†–µ–≥–∏–æ–Ω/–ö—Ä–∞–π
        </button>
        <button
          type="button"
          onClick={() => handleScopeChange('city')}
          className={`px-4 py-2 rounded-lg border transition-all ${
            scope === 'city'
              ? 'border-mb-turquoise bg-mb-turquoise/10 text-mb-turquoise'
              : 'border-mb-gray/20 bg-mb-black/50 text-mb-gray hover:border-mb-turquoise/50'
          }`}
        >
          üìç –ì–æ—Ä–æ–¥
        </button>
      </div>

      {/* –í—Å—è —Å—Ç—Ä–∞–Ω–∞ */}
      {scope === 'country' && (
        <Card className="p-4 bg-mb-turquoise/5 border-mb-turquoise/20">
          <p className="text-sm text-mb-gray">
            –ó–∞–¥–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –≤ –†–æ—Å—Å–∏–∏
          </p>
          <input type="hidden" value="–†–æ—Å—Å–∏—è" />
        </Card>
      )}

      {/* –í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞ */}
      {scope === 'region' && (
        <div>
          <Input
            value={regionInput}
            onChange={(e) => setRegionInput(e.target.value)}
            onFocus={(e) => e.target.style.display = 'none'}
            placeholder="–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å —Ä–µ–≥–∏–æ–Ω –∏–ª–∏ –∫—Ä–∞–π..."
            list="regions-list"
            className="w-full"
          />
          <datalist id="regions-list">
            {regions.map((region) => (
              <option key={region} value={region} />
            ))}
          </datalist>
          
          {regionInput && (
            <div className="mt-2 p-2 bg-mb-black/50 rounded">
              <p className="text-xs text-mb-gray">
                –ó–∞–¥–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –≤: <strong className="text-mb-turquoise">{regionInput}</strong>
              </p>
            </div>
          )}
        </div>
      )}

      {/* –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ */}
      {scope === 'city' && (
        <div>
          <Input
            value={cityInput}
            onChange={(e) => handleCityInputChange(e.target.value)}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–æ—Å–∫–≤–∞, –í–æ—Ä–æ–Ω–µ–∂, –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä)"
            className="w-full"
          />
          
          {cityInput && (
            <div className="mt-2 p-2 bg-mb-black/50 rounded">
              <p className="text-xs text-mb-gray">
                –ó–∞–¥–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –≤: <strong className="text-mb-turquoise">{cityInput}</strong>
              </p>
            </div>
          )}
        </div>
      )}
    </div>
  );
}

