"use client";

import type { Order as PrismaOrder } from '@prisma/client';
import type { OrderUI } from '@/lib/ui-types';
import { Button } from '../ui/button';
import Image from 'next/image';
import { Card } from '../ui/card';
import { Badge } from '../ui/badge';

type Order = OrderUI;
interface OrderCardProps {
  order: Order;
  onAccept: (orderId: string) => void;
  compact?: boolean;
  hideAcceptButton?: boolean; // –°–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑" –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤
  showScreenshotUpload?: boolean; // –ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
  onScreenshotUpload?: (file: File, orderId: string) => void; // Callback –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
}

export function OrderCard({ order, onAccept, compact = false, hideAcceptButton = false, showScreenshotUpload = false, onScreenshotUpload }: OrderCardProps) {
  return (
    <Card className="hover:shadow-glow transition-all duration-300">
      <div className={`flex ${compact ? 'items-center' : 'items-start'} justify-between gap-3 mb-4`}>
        <div className="flex-1">
          <h3 className="text-lg font-semibold text-white leading-tight">{order.title}</h3>
          {!compact && order.description && (
            <p className="text-mb-gray mt-2">{order.description}</p>
          )}
          {/* TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ linkUrl –≤ —Å—Ö–µ–º—É Order, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ */}
          {/* {order.linkUrl && (
            <a
              href={order.linkUrl}
              target="_blank"
              rel="noreferrer"
              className="inline-flex text-sm underline underline-offset-4 text-sky-400 mt-2 hover:text-sky-300 transition-colors"
            >
              üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ
            </a>
          )} */}
          {!compact && (
            <>
              {order.targetAudience && (
                <p className="text-sm text-mb-turquoise mt-1">
                  –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: {order.targetAudience}
                </p>
              )}
              {order.customer?.name && (
                <p className="text-sm text-mb-gray mt-1">
                  –ó–∞–∫–∞–∑—á–∏–∫: {order.customer.name} {order.customer.level && `(${order.customer.level})`}
                </p>
              )}
            </>
          )}
        </div>
        <Badge variant="gold" className="shrink-0">
          {Number(order.totalReward ?? order.reward ?? 0).toLocaleString()}‚ÇΩ
        </Badge>
      </div>
      
      {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
      <div className={`flex flex-wrap items-start gap-4 mb-4`}>
        {order.processedImageUrl && (
          <div className="flex-1 min-w-[200px]">
            <h4 className="text-sm font-medium mb-2 text-white">–ì–æ—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</h4>
            <Image 
              src={order.processedImageUrl}
              alt={order.title ? `–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞: ${order.title}` : '–ì–æ—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'} 
              width={640}
              height={208}
              className="mx-auto max-w-full rounded border-2 border-mb-turquoise max-h-52 object-cover" 
            />
          </div>
        )}
        {order.qrCodeUrl && (
          <div className="text-center">
            <h4 className="text-sm font-medium mb-2 text-white">QR –∫–æ–¥:</h4>
            <Image src={order.qrCodeUrl} alt="QR Code" width={96} height={96} className="mx-auto w-24 h-24 rounded-md" />
          </div>
        )}
      </div>
      
      {!compact && (
        <>
          {/* –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è */}
          <div className="mb-4">
            <h4 className="text-sm font-medium mb-2 text-white">–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</h4>
            <ul className="text-sm text-mb-gray space-y-1">
              <li>‚Ä¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤ —Å—Ç–æ—Ä–∏—Å {order.socialNetwork || 'Instagram/Telegram'}</li>
              <li>‚Ä¢ –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è</li>
              <li>‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏</li>
            </ul>
          </div>

          {/* –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è */}
          {order.deadline && (
            <div className="mb-4">
              <p className="text-sm text-mb-gray">
                –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {new Date(order.deadline).toLocaleDateString('ru-RU')}
              </p>
            </div>
          )}
        </>
      )}
      
      {/* –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–Ω—è—Ç—å */}
      {!hideAcceptButton && (
        <Button 
          onClick={() => onAccept(order.id)}
          className="w-full hover:shadow-lg hover:shadow-mb-turquoise/50 transition-all duration-300"
        >
          –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑
        </Button>
      )}

      {/* –û–∫–Ω–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ */}
      {showScreenshotUpload && onScreenshotUpload && (
        <div className="mt-4 p-4 border border-mb-turquoise/30 rounded-lg bg-mb-black/50">
          <h4 className="text-sm font-semibold mb-2 text-white">–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</h4>
          <input
            type="file"
            accept="image/*"
            onChange={(e) => {
              const file = e.target.files?.[0];
              if (file && onScreenshotUpload) {
                onScreenshotUpload(file, order.id);
              }
            }}
            className="w-full p-2 border border-mb-gray/20 rounded-lg bg-mb-input text-white text-sm mb-2"
          />
          <p className="text-xs text-mb-gray">–°–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç–æ—Ä–∏—Å —Å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º –∑–∞–¥–∞–Ω–∏—è</p>
        </div>
      )}
    </Card>
  );
}

