import { prisma } from './prisma';
import { sendVerificationCode } from './telegram';
import { sendVerificationEmail } from './email';
import { sendSMS } from './sms';
import { nanoid } from 'nanoid';

// –¢–∏–ø—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
export enum VerificationMethod {
  EMAIL = 'email',
  TELEGRAM = 'telegram',
  SMS = 'sms'
}

// –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –º–µ—Ç–æ–¥–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
const verificationPriority = {
  [VerificationMethod.TELEGRAM]: 1, // –°–∞–º—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π
  [VerificationMethod.EMAIL]: 2,    // –í—Ç–æ—Ä–æ–π –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
  [VerificationMethod.SMS]: 3       // –ü–æ—Å–ª–µ–¥–Ω–∏–π (–ø–ª–∞—Ç–Ω—ã–π)
};

// –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const chooseVerificationMethod = (user: any): VerificationMethod => {
  // üöÄ –ö–û–°–¢–´–õ–¨ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø - –≤ dev —Ä–µ–∂–∏–º–µ –≤—Å–µ–≥–¥–∞ EMAIL
  if (process.env.NODE_ENV === 'development') {
    console.log('üî• DEV MODE: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä EMAIL –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');
    return VerificationMethod.EMAIL;
  }

  // 1. Telegram (–µ—Å–ª–∏ –µ—Å—Ç—å)
  if (user.telegramId) {
    return VerificationMethod.TELEGRAM;
  }
  
  // 2. Email (–µ—Å–ª–∏ –µ—Å—Ç—å)
  if (user.email) {
    return VerificationMethod.EMAIL;
  }
  
  // 3. SMS (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  return VerificationMethod.SMS;
};

// –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
export const chooseAdminVerificationMethod = (admin: any): VerificationMethod => {
  // üöÄ –ö–û–°–¢–´–õ–¨ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø - –≤ dev —Ä–µ–∂–∏–º–µ –≤—Å–µ–≥–¥–∞ EMAIL
  if (process.env.NODE_ENV === 'development') {
    console.log('üî• DEV MODE: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä EMAIL –¥–ª—è –∞–¥–º–∏–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');
    return VerificationMethod.EMAIL;
  }

  // –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: Telegram > Email > SMS
  if (admin.telegramId) {
    return VerificationMethod.TELEGRAM;
  }
  
  if (admin.email) {
    return VerificationMethod.EMAIL;
  }
  
  return VerificationMethod.SMS;
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
export const generateVerificationCode = (): string => {
  return Math.floor(100000 + Math.random() * 900000).toString();
};

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
export const createVerificationCode = async (
  adminId: string,
  type: 'SMS' | 'EMAIL' | 'TELEGRAM',
  code: string
) => {
  const expiresAt = new Date(Date.now() + 2 * 60 * 1000); // 2 –º–∏–Ω—É—Ç—ã
  
  return await prisma.adminVerificationCode.create({
    data: {
      adminId,
      type,
      code,
      expiresAt
    }
  });
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
export const sendVerificationCodeToUser = async (
  user: any,
  code: string,
  type: 'admin' | 'user' = 'user'
) => {
  const method = chooseVerificationMethod(user);
  
  switch (method) {
    case VerificationMethod.TELEGRAM:
      return await sendVerificationCode(user.telegramId, code, type);
    
    case VerificationMethod.EMAIL:
      return await sendVerificationEmail(user.email, code, type);
    
    case VerificationMethod.SMS:
      return await sendSMS(user.phone, code, type);
    
    default:
      throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');
  }
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–¥–º–∏–Ω—É
export const sendVerificationCodeToAdmin = async (
  admin: any,
  code: string
) => {
  const method = chooseAdminVerificationMethod(admin);
  
  switch (method) {
    case VerificationMethod.TELEGRAM:
      return await sendVerificationCode(admin.telegramId, code, 'admin');
    
    case VerificationMethod.EMAIL:
      return await sendVerificationEmail(admin.email, code, 'admin');
    
    case VerificationMethod.SMS:
      return await sendSMS(admin.phone, code, 'admin');
    
    default:
      throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
export const verifyCode = async (
  adminId: string,
  code: string,
  type: 'SMS' | 'EMAIL' | 'TELEGRAM'
): Promise<boolean> => {
  // üöÄ –ö–û–°–¢–´–õ–¨ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø - –ª—é–±–æ–π –∫–æ–¥ –ø—Ä–æ—Ö–æ–¥–∏—Ç
  if (process.env.NODE_ENV === 'development') {
    console.log('üî• DEV MODE: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');
    return true;
  }

  const verificationCode = await prisma.adminVerificationCode.findFirst({
    where: {
      adminId,
      code,
      type,
      isUsed: false,
      expiresAt: {
        gt: new Date()
      }
    }
  });
  
  if (!verificationCode) {
    return false;
  }
  
  // –ü–æ–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
  await prisma.adminVerificationCode.update({
    where: { id: verificationCode.id },
    data: { isUsed: true }
  });
  
  return true;
};

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∞–¥–º–∏–Ω–∞
export const createAdminSession = async (adminId: string) => {
  const token = nanoid();
  const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 —á–∞—Å–∞
  
  return await prisma.adminSession.create({
    data: {
      adminId,
      token,
      expiresAt
    }
  });
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ –∞–¥–º–∏–Ω–∞
export const verifyAdminSession = async (token: string) => {
  const session = await prisma.adminSession.findFirst({
    where: {
      token,
      expiresAt: {
        gt: new Date()
      }
    },
    include: {
      admin: true
    }
  });
  
  return session;
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ —Å–µ—Å—Å–∏–∏
export const updateSessionVerification = async (
  sessionId: string,
  type: 'sms' | 'email',
  verified: boolean
) => {
  const updateData = type === 'sms' 
    ? { smsVerified: verified }
    : { emailVerified: verified };
  
  return await prisma.adminSession.update({
    where: { id: sessionId },
    data: updateData
  });
};

// –ü–æ–ª–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–¥–º–∏–Ω–∞ (SMS + Email)
export const isAdminFullyVerified = (session: any): boolean => {
  return session.smsVerified && session.emailVerified;
};

// –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
export const cleanupExpiredCodes = async () => {
  const result = await prisma.adminVerificationCode.deleteMany({
    where: {
      OR: [
        { expiresAt: { lt: new Date() } },
        { isUsed: true }
      ]
    }
  });
  
  console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${result.count} –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏`);
  return result.count;
};

// –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π
export const cleanupExpiredSessions = async () => {
  const result = await prisma.adminSession.deleteMany({
    where: {
      expiresAt: { lt: new Date() }
    }
  });
  
  console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${result.count} –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π`);
  return result.count;
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
export const getVerificationStats = async () => {
  const totalCodes = await prisma.adminVerificationCode.count();
  const usedCodes = await prisma.adminVerificationCode.count({
    where: { isUsed: true }
  });
  const expiredCodes = await prisma.adminVerificationCode.count({
    where: { expiresAt: { lt: new Date() } }
  });
  const activeSessions = await prisma.adminSession.count({
    where: { expiresAt: { gt: new Date() } }
  });
  
  return {
    totalCodes,
    usedCodes,
    expiredCodes,
    activeSessions,
    successRate: totalCodes > 0 ? (usedCodes / totalCodes * 100).toFixed(2) : 0
  };
};

// –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
export const initiateMultiLevelVerification = async (admin: any) => {
  const results = [];
  
  // 1. SMS –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
  if (admin.phone) {
    const smsCode = generateVerificationCode();
    await createVerificationCode(admin.id, 'SMS', smsCode);
    const smsResult = await sendSMS(admin.phone, smsCode, 'admin');
    results.push({ method: 'SMS', success: smsResult.success, code: smsCode });
  }
  
  // 2. Email –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
  if (admin.email) {
    const emailCode = generateVerificationCode();
    await createVerificationCode(admin.id, 'EMAIL', emailCode);
    const emailResult = await sendVerificationEmail(admin.email, emailCode, 'admin');
    results.push({ method: 'EMAIL', success: emailResult.success, code: emailCode });
  }
  
  // 3. Telegram –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
  if (admin.telegramId) {
    const telegramCode = generateVerificationCode();
    await createVerificationCode(admin.id, 'TELEGRAM', telegramCode);
    const telegramResult = await sendVerificationCode(admin.telegramId, telegramCode, 'admin');
    results.push({ method: 'TELEGRAM', success: telegramResult.success, code: telegramCode });
  }
  
  return results;
};

export default {
  VerificationMethod,
  chooseVerificationMethod,
  chooseAdminVerificationMethod,
  generateVerificationCode,
  createVerificationCode,
  sendVerificationCodeToUser,
  sendVerificationCodeToAdmin,
  verifyCode,
  createAdminSession,
  verifyAdminSession,
  updateSessionVerification,
  isAdminFullyVerified,
  cleanupExpiredCodes,
  cleanupExpiredSessions,
  getVerificationStats,
  initiateMultiLevelVerification
};

