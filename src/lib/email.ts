import nodemailer from 'nodemailer';
import { getErrorMessage } from './error';

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
const createTransporter = () => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ App Password
  if (!process.env.EMAIL_APP_PASSWORD || process.env.EMAIL_APP_PASSWORD === 'your-16-character-app-password-here') {
    console.log('‚ö†Ô∏è EMAIL_APP_PASSWORD –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, email –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
    return null;
  }
  
  return nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: process.env.EMAIL_USER || 'shveddamir@gmail.com',
      pass: process.env.EMAIL_APP_PASSWORD
    }
  });
};

// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è email –≤ development
const sendEmailStub = async (email: string, subject: string, html: string, type: string) => {
  console.log(`
üìß EMAIL –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø (–ó–ê–ì–õ–£–®–ö–ê)
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ      
üìß Email: ${email}
üìã –¢–µ–º–∞: ${subject}
üë§ –¢–∏–ø: ${type}
‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString()}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 0‚ÇΩ (–∑–∞–≥–ª—É—à–∫–∞)
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ      
  `);
  
  return { success: true, cost: 0, method: 'stub' };
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
export const sendVerificationEmail = async (email: string, code: string, type: 'admin' | 'user' = 'user') => {
  try {
    const transporter = createTransporter();
    
    if (!transporter) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É –≤ development
      const subject = type === 'admin' 
        ? '–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ MB-TRUST Admin'
        : '–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ MB-TRUST';
      
      return await sendEmailStub(email, subject, `–ö–æ–¥: ${code}`, type);
    }
    
    const subject = type === 'admin' 
      ? '–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ MB-TRUST Admin'
      : '–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ MB-TRUST';
    
    const html = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; background: #0B0B0F; color: #ffffff; padding: 20px;">
        <div style="text-align: center; margin-bottom: 30px;">
          <h1 style="color: #00D4FF; margin: 0;">MB-TRUST</h1>
          <p style="color: #888; margin: 5px 0 0 0;">${type === 'admin' ? '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å' : '–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–æ–≤–µ—Ä–∏—è'}</p>
        </div>
        
        <div style="background: #1a1a1a; padding: 30px; border-radius: 10px; text-align: center;">
          <h2 style="color: #ffffff; margin: 0 0 20px 0;">üîê –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏</h2>
          <p style="color: #ccc; margin: 0 0 20px 0;">–í–∞—à –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞:</p>
          <div style="background: #00D4FF; color: #000; padding: 20px; border-radius: 8px; font-size: 32px; font-weight: bold; letter-spacing: 5px; margin: 20px 0;">
            ${code}
          </div>
          <p style="color: #888; margin: 20px 0 0 0; font-size: 14px;">
            ‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç: 2 –º–∏–Ω—É—Ç—ã<br>
            üîí –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –∫–æ–¥ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º
          </p>
        </div>
        
        <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #333;">
          <p style="color: #666; font-size: 12px; margin: 0;">
            –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —ç—Ç–æ—Ç –∫–æ–¥, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.
          </p>
        </div>
      </div>
    `;
    
    const mailOptions = {
      from: `MB-TRUST <${process.env.EMAIL_USER || 'shveddamir@gmail.com'}>`,
      to: email,
      subject,
      html
    };
    
    await transporter.sendMail(mailOptions);
    return { success: true };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error);
  return { success: false, error: getErrorMessage(error) };
  }
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ
export const sendOrderEmail = async (email: string, orderData: any) => {
  try {
    const transporter = createTransporter();
    
    if (!transporter) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É –≤ development
      return await sendEmailStub(email, '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ MB-TRUST', `–ó–∞–∫–∞–∑: ${orderData.title}`, 'order');
    }
    
    const html = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; background: #0B0B0F; color: #ffffff; padding: 20px;">
        <div style="text-align: center; margin-bottom: 30px;">
          <h1 style="color: #00D4FF; margin: 0;">MB-TRUST</h1>
          <p style="color: #888; margin: 5px 0 0 0;">–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–æ—Å—Ç—É–ø–µ–Ω</p>
        </div>
        
        <div style="background: #1a1a1a; padding: 30px; border-radius: 10px;">
          <h2 style="color: #ffffff; margin: 0 0 20px 0;">üì¢ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–æ—Å—Ç—É–ø–µ–Ω!</h2>
          
          <div style="background: #2a2a2a; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3 style="color: #00D4FF; margin: 0 0 10px 0;">${orderData.title}</h3>
            <p style="color: #ccc; margin: 0 0 15px 0;">${orderData.description}</p>
            
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin: 15px 0;">
              <div>
                <strong style="color: #00D4FF;">üí∞ –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ:</strong><br>
                <span style="color: #fff;">${orderData.reward}‚ÇΩ</span>
              </div>
              <div>
                <strong style="color: #00D4FF;">üåç –†–µ–≥–∏–æ–Ω:</strong><br>
                <span style="color: #fff;">${orderData.region}</span>
              </div>
              <div>
                <strong style="color: #00D4FF;">üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</strong><br>
                <span style="color: #fff;">${orderData.socialNetwork}</span>
              </div>
              <div>
                <strong style="color: #00D4FF;">‚è∞ –î–µ–¥–ª–∞–π–Ω:</strong><br>
                <span style="color: #fff;">${new Date(orderData.deadline).toLocaleString()}</span>
              </div>
            </div>
          </div>
          
          <div style="text-align: center; margin: 20px 0;">
            <a href="${process.env.NEXT_PUBLIC_APP_URL}/executor/dashboard" 
               style="background: #00D4FF; color: #000; padding: 15px 30px; text-decoration: none; border-radius: 8px; font-weight: bold; display: inline-block;">
              –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑
            </a>
          </div>
        </div>
      </div>
    `;
    
    const mailOptions = {
      from: `MB-TRUST <${process.env.EMAIL_USER || 'shveddamir@gmail.com'}>`,
      to: email,
      subject: 'üì¢ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–æ—Å—Ç—É–ø–µ–Ω - MB-TRUST',
      html
    };
    
    await transporter.sendMail(mailOptions);
    return { success: true };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –æ –∑–∞–∫–∞–∑–µ:', error);
  return { success: false, error: getErrorMessage(error) };
  }
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
export const sendExecutionEmail = async (email: string, executionData: any) => {
  try {
    const transporter = createTransporter();
    
    if (!transporter) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É –≤ development
      return await sendEmailStub(email, '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ MB-TRUST', `–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: ${executionData.orderTitle}`, 'execution');
    }
    
    const html = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; background: #0B0B0F; color: #ffffff; padding: 20px;">
        <div style="text-align: center; margin-bottom: 30px;">
          <h1 style="color: #00D4FF; margin: 0;">MB-TRUST</h1>
          <p style="color: #888; margin: 5px 0 0 0;">–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω</p>
        </div>
        
        <div style="background: #1a1a1a; padding: 30px; border-radius: 10px; text-align: center;">
          <h2 style="color: #00D4FF; margin: 0 0 20px 0;">‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω!</h2>
          
          <div style="background: #2a2a2a; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3 style="color: #ffffff; margin: 0 0 15px 0;">${executionData.order.title}</h3>
            
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin: 15px 0;">
              <div>
                <strong style="color: #00D4FF;">üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:</strong><br>
                <span style="color: #fff; font-size: 18px; font-weight: bold;">${executionData.reward}‚ÇΩ</span>
              </div>
              <div>
                <strong style="color: #00D4FF;">üìä –ö–ª–∏–∫–∏:</strong><br>
                <span style="color: #fff;">${executionData.clicks}</span>
              </div>
              <div>
                <strong style="color: #00D4FF;">üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</strong><br>
                <span style="color: #fff;">${executionData.order.socialNetwork}</span>
              </div>
              <div>
                <strong style="color: #00D4FF;">üìÖ –î–∞—Ç–∞:</strong><br>
                <span style="color: #fff;">${new Date(executionData.createdAt).toLocaleString()}</span>
              </div>
            </div>
          </div>
          
          <p style="color: #00D4FF; font-size: 18px; font-weight: bold; margin: 20px 0;">
            üéâ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω!
          </p>
        </div>
      </div>
    `;
    
    const mailOptions = {
      from: `MB-TRUST <${process.env.EMAIL_USER || 'shveddamir@gmail.com'}>`,
      to: email,
      subject: '‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω - MB-TRUST',
      html
    };
    
    await transporter.sendMail(mailOptions);
    return { success: true };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏:', error);
  return { success: false, error: getErrorMessage(error) };
  }
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∞–ª–∞–Ω—Å–µ
export const sendBalanceEmail = async (email: string, balance: number, type: 'deposit' | 'withdrawal' | 'earning') => {
  try {
    const transporter = createTransporter();
    
    if (!transporter) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É –≤ development
      const action = type === 'deposit' ? '–ø–æ–ø–æ–ª–Ω–µ–Ω' : type === 'withdrawal' ? '—Å–ø–∏—Å–∞–Ω' : '–∑–∞—Ä–∞–±–æ—Ç–∞–Ω';
      return await sendEmailStub(email, `–ë–∞–ª–∞–Ω—Å ${action}`, `–ë–∞–ª–∞–Ω—Å: ${balance}‚ÇΩ`, 'balance');
    }
    
    const emoji = type === 'deposit' ? 'üí∞' : type === 'withdrawal' ? 'üí∏' : 'üéâ';
    const action = type === 'deposit' ? '–ø–æ–ø–æ–ª–Ω–µ–Ω' : type === 'withdrawal' ? '—Å–ø–∏—Å–∞–Ω' : '–∑–∞—Ä–∞–±–æ—Ç–∞–Ω';
    const title = type === 'deposit' ? '–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω' : type === 'withdrawal' ? '–°—Ä–µ–¥—Å—Ç–≤–∞ —Å–ø–∏—Å–∞–Ω—ã' : '–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ!';
    
    const html = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; background: #0B0B0F; color: #ffffff; padding: 20px;">
        <div style="text-align: center; margin-bottom: 30px;">
          <h1 style="color: #00D4FF; margin: 0;">MB-TRUST</h1>
          <p style="color: #888; margin: 5px 0 0 0;">${title}</p>
        </div>
        
        <div style="background: #1a1a1a; padding: 30px; border-radius: 10px; text-align: center;">
          <h2 style="color: #ffffff; margin: 0 0 20px 0;">${emoji} –ë–∞–ª–∞–Ω—Å ${action}!</h2>
          
          <div style="background: #2a2a2a; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <div style="font-size: 32px; font-weight: bold; color: #00D4FF; margin: 20px 0;">
              ${balance}‚ÇΩ
            </div>
            <p style="color: #ccc; margin: 0;">
              –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            </p>
          </div>
          
          ${type === 'earning' ? `
            <p style="color: #00D4FF; font-size: 18px; font-weight: bold; margin: 20px 0;">
              üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞!
            </p>
          ` : ''}
          
          <div style="text-align: center; margin: 20px 0;">
            <a href="${process.env.NEXT_PUBLIC_APP_URL}/dashboard" 
               style="background: #00D4FF; color: #000; padding: 15px 30px; text-decoration: none; border-radius: 8px; font-weight: bold; display: inline-block;">
              –ü–µ—Ä–µ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
            </a>
          </div>
        </div>
      </div>
    `;
    
    const mailOptions = {
      from: `MB-TRUST <${process.env.EMAIL_USER || 'shveddamir@gmail.com'}>`,
      to: email,
      subject: `${emoji} ${title} - MB-TRUST`,
      html
    };
    
    await transporter.sendMail(mailOptions);
    return { success: true };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –æ –±–∞–ª–∞–Ω—Å–µ:', error);
  return { success: false, error: getErrorMessage(error) };
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ email
export const isValidEmail = (email: string): boolean => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
};

export default {
  sendVerificationEmail,
  sendOrderEmail,
  sendExecutionEmail,
  sendBalanceEmail,
  isValidEmail
};

