/* eslint-disable @typescript-eslint/no-explicit-any */
import TelegramBot from 'node-telegram-bot-api'

const INTRO = [
  '–ü—Ä–∏–≤–µ—Ç! üëã –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ MB‚ÄëTRUST.',
  '',
  '–°–µ–π—á–∞—Å —è –∑–∞–¥–∞–º —Ç–µ–±–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Å–µ–±–µ. –ú–æ–∂–µ—à—å –æ—Ç–≤–µ—á–∞—Ç—å –≤ –ª—é–±–æ–π —Ñ–æ—Ä–º–µ ‚Äî —è –ø–æ–π–º—É! üòä',
  '',
  '–ù–∞—á–Ω—ë–º?'
].join('\n')

// –¢–∏–ø –¥–ª—è —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
interface CollectedData {
  real?: string;          // yes/no
  messenger?: string;     // Telegram, VK, WhatsApp, TenChat
  city?: string;          // –≥–æ—Ä–æ–¥
  followers?: number;     // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
  daily?: boolean;        // —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
  name?: string;          // –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã
function isDataComplete(data: CollectedData): boolean {
  return !!(
    data.real &&
    data.messenger &&
    data.city &&
    data.followers !== undefined &&
    data.daily !== undefined &&
    data.name
  )
}

// –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á–µ–≥–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç
function getMissingFields(data: CollectedData): string {
  const missing: string[] = []
  const collected: string[] = []
  
  if (!data.real) {
    missing.push('‚Ä¢ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —á—Ç–æ —Ç—ã —Ä–µ–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫')
  } else {
    collected.push('‚úì –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏')
  }
  
  if (!data.messenger) {
    missing.push('‚Ä¢ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä (Telegram/VK/WhatsApp/TenChat)')
  } else {
    collected.push(`‚úì –ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä: ${data.messenger}`)
  }
  
  if (!data.city) {
    missing.push('‚Ä¢ –≥–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è')
  } else {
    collected.push(`‚úì –ì–æ—Ä–æ–¥: ${data.city}`)
  }
  
  if (data.followers === undefined) {
    missing.push('‚Ä¢ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤')
  } else {
    collected.push(`‚úì –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: ${data.followers}`)
  }
  
  if (data.daily === undefined) {
    missing.push('‚Ä¢ —Ö–æ—á–µ—à—å –ª–∏ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ')
  } else {
    collected.push(`‚úì –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è: ${data.daily ? '–¥–∞' : '–Ω–µ—Ç'}`)
  }
  
  if (!data.name) {
    missing.push('‚Ä¢ —Ç–≤–æ—ë –∏–º—è')
  } else {
    collected.push(`‚úì –ò–º—è: ${data.name}`)
  }
  
  if (missing.length === 0) return ''
  
  let result = '\n\n‚úÖ –£–∂–µ —Å–æ–±—Ä–∞–Ω–æ:\n' + collected.join('\n')
  result += '\n\nüìù –ï—â—ë –Ω—É–∂–Ω–æ:\n' + missing.join('\n')
  return result
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI
async function processWithAI(
  userMessage: string,
  collectedData: CollectedData,
  conversationHistory: Array<{role: string, content: string}>
): Promise<{ response: string; extracted: Partial<CollectedData> }> {
  const openaiKey = process.env.OPENAI_API_KEY
  
  if (!openaiKey) {
    // Fallback –±–µ–∑ AI - –ø—Ä–æ—Å—Ç—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    const missing = getMissingFields(collectedData)
    let fallbackResponse = '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç! '
    
    if (!collectedData.real) {
      fallbackResponse = '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ —Ç—ã —Ä–µ–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ üòä'
    } else if (!collectedData.messenger) {
      fallbackResponse = '–ö–∞–∫–æ–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —á–∞—â–µ –≤—Å–µ–≥–æ? (Telegram, VK, WhatsApp, TenChat)'
    } else if (!collectedData.city) {
      fallbackResponse = '–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã –∂–∏–≤–µ—à—å?'
    } else if (collectedData.followers === undefined) {
      fallbackResponse = '–°–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è –ø—Ä–∏–º–µ—Ä–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤? (–Ω–∞–ø–∏—à–∏ —á–∏—Å–ª–æ)'
    } else if (collectedData.daily === undefined) {
      fallbackResponse = '–•–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å? (–¥–∞/–Ω–µ—Ç)'
    } else if (!collectedData.name) {
      fallbackResponse = '–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? (–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è)'
    } else {
      fallbackResponse = '–û—Ç–ª–∏—á–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.'
    }
    
    return {
      response: fallbackResponse,
      extracted: {}
    }
  }

  try {
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è AI
    const systemPrompt = `–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã MB-TRUST. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ–±—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ.

–ù—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å:
1. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —á—Ç–æ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ (–¥–∞/–Ω–µ—Ç) -> —Å–æ—Ö—Ä–∞–Ω–∏ –∫–∞–∫ "yes" –∏–ª–∏ "no"
2. –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä (–æ–¥–Ω–æ –∏–∑: Telegram, VK, WhatsApp, TenChat)
3. –ì–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è
4. –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (—á–∏—Å–ª–æ)
5. –•–æ—á–µ—Ç –ª–∏ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ (–¥–∞/–Ω–µ—Ç) -> —Å–æ—Ö—Ä–∞–Ω–∏ –∫–∞–∫ true/false
6. –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è

–£–∂–µ —Å–æ–±—Ä–∞–Ω–æ: ${JSON.stringify(collectedData)}

–í–ê–ñ–ù–û:
- –í–µ–¥–∏ –¥–∏–∞–ª–æ–≥ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ —Ä–∞—Å—Å–∫–∞–∑–∞–ª —á—Ç–æ-—Ç–æ ‚Äî —Å–ø—Ä–æ—Å–∏ –æ–± —ç—Ç–æ–º –º—è–≥–∫–æ, –ø–æ –æ–¥–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É–ø–æ–º—è–Ω—É–ª —á—Ç–æ-—Ç–æ ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ —ç—Ç–æ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
- –ù–µ –∑–∞–¥–∞–≤–∞–π –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã —Å—Ä–∞–∑—É ‚Äî –∑–∞–¥–∞–≤–∞–π –ø–æ 1-2, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ
- –ü–æ–¥—Å–∫–∞–∑—ã–≤–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –µ—â–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å
- –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–ø–æ–Ω—è—Ç–µ–Ω ‚Äî —É—Ç–æ—á–Ω–∏ –≤–æ–ø—Ä–æ—Å, –Ω–æ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –¥—Ä—É–∂–µ–ª—é–±–∏—è

–û—Ç–≤–µ—á–∞–π –ö–û–†–û–¢–ö–û (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –¥—Ä—É–∂–µ–ª—é–±–Ω–æ.`

    const messages = [
      { role: 'system', content: systemPrompt },
      ...conversationHistory,
      { role: 'user', content: userMessage }
    ]

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages,
        temperature: 0.7,
        max_tokens: 200
      })
    })

    const data = await response.json()
    const aiResponse = data.choices[0]?.message?.content || '–°–ø–∞—Å–∏–±–æ! –†–∞—Å—Å–∫–∞–∂–∏ –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ.'

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é AI
    const extractResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: `–ò–∑–≤–ª–µ–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –æ–±—ä–µ–∫—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–ª—è–º–∏: real (yes/no –∏–ª–∏ null), messenger (–æ–¥–Ω–æ –∏–∑: Telegram, VK, WhatsApp, TenChat –∏–ª–∏ null), city (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ null), followers (—á–∏—Å–ª–æ –∏–ª–∏ null), daily (true/false –∏–ª–∏ null), name (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ null). –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ - –≤–µ—Ä–Ω–∏ null –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è. –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {"real": "yes", "messenger": null, "city": "–ú–æ—Å–∫–≤–∞", "followers": 5000, "daily": true, "name": null}`
          },
          {
            role: 'user',
            content: `–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${userMessage}". –£–∂–µ —Å–æ–±—Ä–∞–Ω–æ: ${JSON.stringify(collectedData)}`
          }
        ],
        temperature: 0.3,
        max_tokens: 150,
        response_format: { type: 'json_object' }
      })
    })

    const extractData = await extractResponse.json()
    const extracted: Partial<CollectedData> = {}
    
    try {
      const parsed = JSON.parse(extractData.choices[0]?.message?.content || '{}')
      if (parsed.real && !collectedData.real) extracted.real = parsed.real
      if (parsed.messenger && !collectedData.messenger) extracted.messenger = parsed.messenger
      if (parsed.city && !collectedData.city) extracted.city = parsed.city
      if (parsed.followers !== null && parsed.followers !== undefined && collectedData.followers === undefined) {
        extracted.followers = Number(parsed.followers)
      }
      if (parsed.daily !== undefined && parsed.daily !== null && collectedData.daily === undefined) {
        extracted.daily = Boolean(parsed.daily)
      }
      if (parsed.name && !collectedData.name) extracted.name = parsed.name
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç AI:', e)
    }

    return { response: aiResponse, extracted }
  } catch (error) {
    console.error('OpenAI error:', error)
    return {
      response: '–°–ø–∞—Å–∏–±–æ! –†–∞—Å—Å–∫–∞–∂–∏ –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ.',
      extracted: {}
    }
  }
}

const sessions = new Map<number, {
  code?: string;
  waitingForCode?: boolean; // –û–∂–∏–¥–∞–µ–º –ª–∏ –≤–≤–æ–¥ –∫–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  data: CollectedData;
  conversationHistory: Array<{role: string, content: string}>;
}>()

let botInstance: InstanceType<typeof TelegramBot> | null = null;
let isInitialized = false;

export const initializeTelegramBot = () => {
  // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  if (isInitialized && botInstance) {
    console.log('‚ö†Ô∏è Telegram –±–æ—Ç —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫')
    return botInstance
  }

  const token = process.env.BOT_TOKEN
  if (!token) {
    console.log('‚ö†Ô∏è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω')
    return
  }

  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –µ—Å–ª–∏ –æ–Ω –±—ã–ª
  if (botInstance) {
    try {
      botInstance.stopPolling()
      botInstance.stopWebHook()
      botInstance = null
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    }
  }

  try {
    const bot = new TelegramBot(token, { polling: true })
    botInstance = bot
    isInitialized = true

    // –∫–æ–º–∞–Ω–¥—ã / –æ–ø–∏—Å–∞–Ω–∏–µ
    bot.setMyCommands([
      { command: 'start', description: '–ù–∞—á–∞—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é/–ø—Ä–∏–≤—è–∑–∫—É' },
      { command: 'help', description: '–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞' },
    ]).catch(() => {})
    bot.setMyDescription('MB‚ÄëTRUST ‚Äî –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Ç—Ä–∞—Å—Ç‚Äë–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞. –ó–∞–¥–∞–Ω–∏—è, –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç—å, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–ø–ª–∞—Ç—ã.').catch(() => {})

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ –∏ –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞
    const startVerificationWithCode = async (chatId: number, code: string) => {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const response = await fetch(`${process.env.NEXTAUTH_URL || 'http://localhost:3000'}/api/verification/telegram/complete`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            code,
            telegramId: chatId.toString(),
            checkOnly: true // –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞, –±–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
          })
        })
        
        const result = await response.json()
        
        if (!result.valid) {
          await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.\n\n–ò–ª–∏ –ø–µ—Ä–µ–π–¥–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç MB‚ÄëTRUST –∏ –ø–æ–ª—É—á–∏ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.')
          return false
        }

        // –ö–æ–¥ –≤–µ—Ä–Ω—ã–π, –Ω–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥
        sessions.set(chatId, { 
          code, 
          data: {}, 
          conversationHistory: [
            { role: 'system', content: '–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ MB-TRUST.' }
          ]
        })

        // –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å AI
        const session = sessions.get(chatId)!
        const { response: aiResponse } = await processWithAI('–ü—Ä–∏–≤–µ—Ç! –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.', session.data, session.conversationHistory)
        
        session.conversationHistory.push(
          { role: 'assistant', content: aiResponse }
        )
        
        await bot.sendMessage(chatId, INTRO + '\n\n' + aiResponse + getMissingFields(session.data))
        return true
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞:', error)
        await bot.sendMessage(chatId, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.')
        return false
      }
    }

    bot.onText(/\/start(?:\s+(.+))?/, async (msg: any, match: any) => {
      const chatId = msg.chat.id
      const payload = match?.[1]?.trim() || ''

      let code: string | undefined
      if (payload.startsWith('link_')) {
        code = payload.substring('link_'.length)
      }

      if (code) {
        // –ö–æ–¥ –ø–µ—Ä–µ–¥–∞–Ω –≤ —Å—Å—ã–ª–∫–µ
        await startVerificationWithCode(chatId, code)
      } else {
        // –ö–æ–¥ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.sendMessage(chatId, INTRO + '\n\nüìù –î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –ø–æ–ª—É—á–∏–ª –Ω–∞ —Å–∞–π—Ç–µ MB‚ÄëTRUST.\n\n–ö–æ–¥ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram".')
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞
        sessions.set(chatId, {
          waitingForCode: true,
          data: {},
          conversationHistory: []
        })
      }
    })

    bot.onText(/\/help/, async (msg: any) => {
      const chatId = msg.chat.id
      await bot.sendMessage(chatId, [
        'üìö –ü–æ–º–æ—â—å:',
        '',
        '1) –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç ‚Üí "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram"',
        '2) –ù–∞–∂–º–∏ "–ù–∞—á–∞—Ç—å –ø—Ä–∏–≤—è–∑–∫—É" –∏ –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ',
        '3) –û—Ç–≤–µ—á–∞–π –Ω–∞ –º–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –≤ –ª—é–±–æ–π —Ñ–æ—Ä–º–µ',
        '4) –í–µ—Ä–Ω–∏—Å—å –Ω–∞ —Å–∞–π—Ç ‚Äî —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏',
        '',
        'üí° –ú–æ–∂–µ—à—å –æ—Ç–≤–µ—á–∞—Ç—å —Å—Ä–∞–∑—É –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ —Å–µ–±–µ —Å–≤–æ–±–æ–¥–Ω–æ ‚Äî —è –ø–æ–π–º—É! üòä'
      ].join('\n'))
    })

    bot.on('message', async (msg: any) => {
      const chatId = msg.chat.id
      if (!sessions.has(chatId)) return
      if (msg.text?.startsWith('/start') || msg.text?.startsWith('/help')) return

      const session = sessions.get(chatId)!
      const text = String(msg.text || '').trim()

      if (!text) {
        await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üòä')
        return
      }

      // –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –∫–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (session.waitingForCode && !session.code) {
        const code = text.trim()
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞ (–æ–±—ã—á–Ω–æ —ç—Ç–æ hex —Å—Ç—Ä–æ–∫–∞ –¥–ª–∏–Ω–æ–π 6 —Å–∏–º–≤–æ–ª–æ–≤)
        if (code.length < 4 || code.length > 20) {
          await bot.sendMessage(chatId, '‚ùå –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 4 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤. –ü—Ä–æ–≤–µ—Ä—å –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.')
          return
        }
        
        // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–¥ –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        const success = await startVerificationWithCode(chatId, code)
        // startVerificationWithCode —É–∂–µ —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å –∫–æ–¥–æ–º, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â—É—é
        if (!success) {
          // –ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π - –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é —Å —Ñ–ª–∞–≥–æ–º waitingForCode –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
          return
        }
        // –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, —Å–µ—Å—Å–∏—è —É–∂–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞ –≤ startVerificationWithCode, –º–æ–∂–Ω–æ –≤—ã–π—Ç–∏
        return
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
      session.conversationHistory.push({ role: 'user', content: text })

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å –ø–æ–º–æ—â—å—é AI
      const { response, extracted } = await processWithAI(
        text,
        session.data,
        session.conversationHistory
      )

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      Object.assign(session.data, extracted)

      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç AI –≤ –∏—Å—Ç–æ—Ä–∏—é
      session.conversationHistory.push({ role: 'assistant', content: response })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–±—Ä–∞–Ω—ã –ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
      if (isDataComplete(session.data)) {
        // –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã!
        try {
          const resp = await fetch(`${process.env.NEXTAUTH_URL || 'http://localhost:3000'}/api/verification/telegram/complete`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              code: session.code,
              telegramId: msg.from.id,
              telegramUsername: msg.from.username,
              name: session.data.name,
              city: session.data.city,
              preferredMessenger: session.data.messenger,
              followersApprox: session.data.followers,
              dailyTasksOptIn: !!session.data.daily
            })
          })
          const result = await resp.json()
          
          if (result.success) {
            await bot.sendMessage(chatId, '‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã. –¢–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω. –ú–æ–∂–µ—à—å –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç! üéâ')
          } else {
            await bot.sendMessage(chatId, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å: ${result.error || '–æ—à–∏–±–∫–∞'}\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`)
          }
        } catch (e) {
          await bot.sendMessage(chatId, '‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.')
        } finally {
          sessions.delete(chatId)
        }
      } else {
        // –ï—â–µ –Ω–µ –≤—Å–µ —Å–æ–±—Ä–∞–Ω–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç AI —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
        const missingHint = getMissingFields(session.data)
        await bot.sendMessage(chatId, response + (missingHint ? missingHint : ''))
      }
    })

    console.log('‚úÖ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å OpenAI –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π')
    return bot
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Telegram –±–æ—Ç–∞:', error)
    isInitialized = false
    botInstance = null
    return null
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ telegram-init-server.ts