import TelegramBot from 'node-telegram-bot-api';

// –¢–∏–ø—ã –¥–ª—è Telegram Bot API
type TelegramMessage = {
  message_id: number;
  from?: {
    id: number;
    first_name?: string;
    last_name?: string;
    username?: string;
  };
  chat: {
    id: number;
    type: string;
  };
  text?: string;
  date: number;
};

type TelegramError = {
  code: number;
  description: string;
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN!, { 
  polling: false,
  webHook: false  // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∏—Ç—å polling –∏ webhook
});

// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è Telegram –≤ development
const sendTelegramStub = async (telegramId: string, message: string, type: string) => {
  console.log(`
ü§ñ TELEGRAM –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø (–ó–ê–ì–õ–£–®–ö–ê)
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ      
üì± Telegram ID: ${telegramId}
üìã –°–æ–æ–±—â–µ–Ω–∏–µ: ${message.replace(/\*/g, '').replace(/`/g, '')}
üë§ –¢–∏–ø: ${type}
‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString()}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 0‚ÇΩ (–∑–∞–≥–ª—É—à–∫–∞)
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ      
  `);
  
  return { success: true, cost: 0, method: 'stub' };
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
export const sendVerificationCode = async (telegramId: string, code: string, type: 'admin' | 'user' = 'user') => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ç–µ—Å—Ç–æ–≤—ã–π ID
    if (telegramId === '123456789' || !telegramId || telegramId.length < 5) {
      const message = type === 'admin' 
        ? `–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ MB-TRUST Admin: ${code}`
        : `–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ MB-TRUST: ${code}`;
      
      return await sendTelegramStub(telegramId, message, type);
    }

    const message = type === 'admin' 
      ? `
üîê **–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ MB-TRUST Admin**

–í–∞—à –∫–æ–¥: \`${code}\`

‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç: 2 –º–∏–Ω—É—Ç—ã
üîí –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –∫–æ–¥ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º
      `
      : `
üîê **–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ MB-TRUST**

–í–∞—à –∫–æ–¥: \`${code}\`

‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç: 2 –º–∏–Ω—É—Ç—ã
üîí –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –∫–æ–¥ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º
      `;

    await bot.sendMessage(telegramId, message, { parse_mode: 'Markdown' });
    return { success: true };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    
    // Fallback –Ω–∞ –∑–∞–≥–ª—É—à–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    const message = type === 'admin' 
      ? `–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ MB-TRUST Admin: ${code}`
      : `–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ MB-TRUST: ${code}`;
    
    return await sendTelegramStub(telegramId, message, type);
  }
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ
export const sendOrderNotification = async (telegramId: string, orderData: any) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ç–µ—Å—Ç–æ–≤—ã–π ID
    if (telegramId === '123456789' || !telegramId || telegramId.length < 5) {
      const message = `–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ MB-TRUST: ${orderData.title}`;
      return await sendTelegramStub(telegramId, message, 'order');
    }

    const message = `
üì¢ **–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–æ—Å—Ç—É–ø–µ–Ω!**

üìã **${orderData.title}**
üí∞ **–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ:** ${orderData.reward}‚ÇΩ
üåç **–†–µ–≥–∏–æ–Ω:** ${orderData.region}
üì± **–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:** ${orderData.socialNetwork}
‚è∞ **–î–µ–¥–ª–∞–π–Ω:** ${new Date(orderData.deadline).toLocaleString()}

üéØ **–û–ø–∏—Å–∞–Ω–∏–µ:** ${orderData.description}

–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞.
    `;
    
    await bot.sendMessage(telegramId, message, { parse_mode: 'Markdown' });
    return { success: true };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ:', error);
    
    // Fallback –Ω–∞ –∑–∞–≥–ª—É—à–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    const message = `–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ MB-TRUST: ${orderData.title}`;
    return await sendTelegramStub(telegramId, message, 'order');
  }
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
export const sendExecutionNotification = async (telegramId: string, executionData: any) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ç–µ—Å—Ç–æ–≤—ã–π ID
    if (telegramId === '123456789' || !telegramId || telegramId.length < 5) {
      const message = `–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ MB-TRUST: ${executionData.orderTitle}`;
      return await sendTelegramStub(telegramId, message, 'execution');
    }

    const message = `
‚úÖ **–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω!**

üìã **${executionData.order.title}**
üí∞ **–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:** ${executionData.reward}‚ÇΩ
üìä **–ö–ª–∏–∫–∏:** ${executionData.clicks}
üì± **–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:** ${executionData.order.socialNetwork}

–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω!
    `;
    
    await bot.sendMessage(telegramId, message, { parse_mode: 'Markdown' });
    return { success: true };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏:', error);
    
    // Fallback –Ω–∞ –∑–∞–≥–ª—É—à–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    const message = `–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ MB-TRUST: ${executionData.orderTitle}`;
    return await sendTelegramStub(telegramId, message, 'execution');
  }
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∞–ª–∞–Ω—Å–µ
export const sendBalanceNotification = async (telegramId: string, balance: number, type: 'deposit' | 'withdrawal' | 'earning') => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ç–µ—Å—Ç–æ–≤—ã–π ID
    if (telegramId === '123456789' || !telegramId || telegramId.length < 5) {
      const action = type === 'deposit' ? '–ø–æ–ø–æ–ª–Ω–µ–Ω' : type === 'withdrawal' ? '—Å–ø–∏—Å–∞–Ω' : '–∑–∞—Ä–∞–±–æ—Ç–∞–Ω';
      const message = `–ë–∞–ª–∞–Ω—Å ${action}: ${balance}‚ÇΩ`;
      return await sendTelegramStub(telegramId, message, 'balance');
    }

    const emoji = type === 'deposit' ? 'üí∞' : type === 'withdrawal' ? 'üí∏' : 'üéâ';
    const action = type === 'deposit' ? '–ø–æ–ø–æ–ª–Ω–µ–Ω' : type === 'withdrawal' ? '—Å–ø–∏—Å–∞–Ω' : '–∑–∞—Ä–∞–±–æ—Ç–∞–Ω';
    
    const message = `
${emoji} **–ë–∞–ª–∞–Ω—Å ${action}!**

üí≥ **–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:** ${balance}‚ÇΩ

${type === 'earning' ? '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞!' : ''}
    `;
    
    await bot.sendMessage(telegramId, message, { parse_mode: 'Markdown' });
    return { success: true };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∞–ª–∞–Ω—Å–µ:', error);
    
    // Fallback –Ω–∞ –∑–∞–≥–ª—É—à–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    const action = type === 'deposit' ? '–ø–æ–ø–æ–ª–Ω–µ–Ω' : type === 'withdrawal' ? '—Å–ø–∏—Å–∞–Ω' : '–∑–∞—Ä–∞–±–æ—Ç–∞–Ω';
    const message = `–ë–∞–ª–∞–Ω—Å ${action}: ${balance}‚ÇΩ`;
    return await sendTelegramStub(telegramId, message, 'balance');
  }
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞
export const setupTelegramBot = () => {
  // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
  console.log('ü§ñ Telegram –±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω (polling –∏ webhook –æ—Ç–∫–ª—é—á–µ–Ω—ã)');
  return;
  
  bot.on('message', async (msg: TelegramMessage) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    
    if (text === '/start') {
      await bot.sendMessage(chatId, `
ü§ñ **MB-TRUST Bot**

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è:
‚Ä¢ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–∫–∞–∑–∞—Ö
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∏

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
      `);
    }
    
    if (text === '/help') {
      await bot.sendMessage(chatId, `
üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
/orders - –ú–æ–∏ –∑–∞–∫–∞–∑—ã (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)

üí¨ **–ü–æ–¥–¥–µ—Ä–∂–∫–∞:** @mb_trust_support
      `);
    }
  });
  
  bot.on('error', (error: TelegramError) => {
    console.error('–û—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞:', error);
  });
  
  console.log('ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
export const getTelegramUserInfo = async (telegramId: string) => {
  try {
    const user = await bot.getChat(telegramId);
    return {
      id: user.id.toString(),
      username: 'username' in user ? user.username : null,
      firstName: 'first_name' in user ? user.first_name : null,
      lastName: 'last_name' in user ? user.last_name : null,
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
    return null;
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ Telegram ID
export const isValidTelegramId = (telegramId: string): boolean => {
  return /^\d+$/.test(telegramId) && telegramId.length >= 8;
};

export default bot;

